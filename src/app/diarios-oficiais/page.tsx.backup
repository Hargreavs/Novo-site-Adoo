'use client';

import { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { createPortal } from 'react-dom';
import RegisterModal from '@/components/RegisterModal';
import TransparentHeader from '@/components/TransparentHeader';
import TestModal from '@/components/TestModal';
import DatePicker from '@/components/DatePicker';
import Toast from '@/components/Toast';
import { 
  MagnifyingGlassIcon, 
  BellIcon, 
  DocumentTextIcon,
  XMarkIcon,
  PlusIcon,
  EyeIcon,
  ArrowDownTrayIcon,
  LinkIcon,
  TrashIcon,
  CalendarIcon,
  CheckIcon
} from '@heroicons/react/24/outline';

export default function DiariosOficiais() {
  const [activeTab, setActiveTab] = useState('buscar');
  // Simular usuário logado para testes
  useEffect(() => {
    if (typeof window !== 'undefined' && !localStorage.getItem('isLoggedIn')) {
      localStorage.setItem('isLoggedIn', 'true');
    }
  }, []);
  const [searchTerms, setSearchTerms] = useState<string[]>([]);
  const [selectedDiarios, setSelectedDiarios] = useState<string[]>([]);
  const [searchPeriod, setSearchPeriod] = useState('7d');
  const [isTestModalOpen, setIsTestModalOpen] = useState(false);
  const [customDateRange, setCustomDateRange] = useState({ start: undefined as Date | undefined, end: undefined as Date | undefined });
  const [dateValidationError, setDateValidationError] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [hasSearched, setHasSearched] = useState(false);
  const [searchInput, setSearchInput] = useState('');
  const [diarioSearchTerm, setDiarioSearchTerm] = useState('');
  const [showDiarioDropdown, setShowDiarioDropdown] = useState(false);
  const [showDateFilters, setShowDateFilters] = useState(false);
  const [expandedPoderes, setExpandedPoderes] = useState<Record<string, boolean>>({});
  const [expandedSubcategorias, setExpandedSubcategorias] = useState<Record<string, boolean>>({});
  const [highlightDiarios, setHighlightDiarios] = useState(false);
  
  // Estado para toast
  const [toast, setToast] = useState<{
    message: string;
    type: 'success' | 'error' | 'info';
    isVisible: boolean;
  }>({
    message: '',
    type: 'info',
    isVisible: false
  });

  // Estados para histórico de pesquisas
  const [searchHistory, setSearchHistory] = useState<Array<{
    id: string;
    term: string;
    selectedDiarios: string[];
    searchPeriod: string;
    customDateRange?: { start: string; end: string };
    timestamp: number;
  }>>([]);
  const [showSearchHistory, setShowSearchHistory] = useState(false);
  const [searchInputFocused, setSearchInputFocused] = useState(false);
  
  // Estados específicos para sub-aba "Monitorar Termos"
  const [monitorSearchInput, setMonitorSearchInput] = useState('');
  const [monitorSearchTerms, setMonitorSearchTerms] = useState<string[]>([]);
  const [monitorSelectedDiarios, setMonitorSelectedDiarios] = useState<string[]>([]);
  const [monitorDiarioSearchTerm, setMonitorDiarioSearchTerm] = useState('');
  const [monitorExpandedPoderes, setMonitorExpandedPoderes] = useState<Record<string, boolean>>({});
  const [monitorExpandedSubcategorias, setMonitorExpandedSubcategorias] = useState<Record<string, boolean>>({});
  const [monitorHighlightDiarios, setMonitorHighlightDiarios] = useState(false);
  
  // Ref para o campo de busca da sub-aba Monitorar Termos
  const monitorSearchInputRef = useRef<HTMLInputElement>(null);
  
  // Estados separados para histórico de pesquisas da sub-aba Monitorar termos
  const [monitorSearchHistory, setMonitorSearchHistory] = useState<Array<{
    id: string;
    term: string;
    selectedDiarios: string[];
    searchPeriod: string;
    customDateRange?: { start: string; end: string };
    timestamp: number;
  }>>([]);
  const [showMonitorSearchHistory, setShowMonitorSearchHistory] = useState(false);
  const [monitorSearchInputFocused, setMonitorSearchInputFocused] = useState(false);
  const [searchResults, setSearchResults] = useState<Array<{
    id: number;
    title: string;
    source: string;
    date: string;
    excerpt: string;
    url: string;
    sections?: Array<{
      id: string;
      name: string;
      url: string;
    }>;
  }>>([]);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [deletingMonitoringId, setDeletingMonitoringId] = useState<number | null>(null);
  const [showToast, setShowToast] = useState(false);
  const [toastMessage, setToastMessage] = useState('');
  const [expandedCategories, setExpandedCategories] = useState<{[key: string]: boolean}>({});
  const [showCustomDateRange, setShowCustomDateRange] = useState(false);
  const [monitorTerm, setMonitorTerm] = useState<string | null>(null);
  const [monitorDiarios, setMonitorDiarios] = useState<string[]>([]);
  const [monitoramentos, setMonitoramentos] = useState<Array<{
    id: number;
    terms: string[];
    diarios: string[];
    isActive: boolean;
    createdAt: string;
    occurrences: number;
  }>>([
    {
      id: 1,
      terms: ['concurso público'],
      diarios: ['dou', 'dosp'],
      isActive: true,
      createdAt: '2024-01-10',
      occurrences: 15
    },
    {
      id: 2,
      terms: ['licitação'],
      diarios: ['dou', 'dom'],
      isActive: true,
      createdAt: '2024-01-08',
      occurrences: 8
    }
  ]);


  const [monitoredTerms, setMonitoredTerms] = useState<Set<string>>(new Set());
  const [selectedDiario, setSelectedDiario] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const [navegarExpandedCategories, setNavegarExpandedCategories] = useState<{[key: string]: boolean}>({});
  const [navegarDiarioSearchTerm, setNavegarDiarioSearchTerm] = useState('');
  const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({});
  const [sectionAnimations, setSectionAnimations] = useState<{[key: string]: string}>({});
  const [showDrawer, setShowDrawer] = useState(false);
  const [selectedPublication, setSelectedPublication] = useState<{
    id: number;
    title: string;
    source: string;
    date: string;
    excerpt: string;
    url: string;
  } | null>(null);
  const [newMonitorTerm, setNewMonitorTerm] = useState('');
  const [monitorTermInput, setMonitorTermInput] = useState('');
  const [validationError, setValidationError] = useState('');
  const [editingMonitor, setEditingMonitor] = useState<number | null>(null);
  const [showMonitorDrawer, setShowMonitorDrawer] = useState(false);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [isRegisterModalOpen, setIsRegisterModalOpen] = useState(false);
  const [hasClickedCreateMonitor, setHasClickedCreateMonitor] = useState(false);
  const [selectedMonitor, setSelectedMonitor] = useState<{
    id: number;
    terms: string[];
    diarios: string[];
    isActive: boolean;
    createdAt: string;
    occurrences: number;
  } | null>(null);
  const [inputTimeout, setInputTimeout] = useState<NodeJS.Timeout | null>(null);
  const [monitorExpandedCategories, setMonitorExpandedCategories] = useState<{[key: string]: boolean}>({});
  const [drawerAnimation, setDrawerAnimation] = useState<'slide-in' | 'slide-out' | null>(null);
  const [monitorDrawerAnimation, setMonitorDrawerAnimation] = useState<'slide-in' | 'slide-out' | null>(null);
  const [navegarExpandedPoderes, setNavegarExpandedPoderes] = useState<{[key: string]: boolean}>({});
  const [navegarExpandedSubcategorias, setNavegarExpandedSubcategorias] = useState<{[key: string]: boolean}>({});

  const tabs = [
    { id: 'buscar', label: 'Buscar termos', icon: MagnifyingGlassIcon },
    { id: 'monitorar', label: 'Monitorar termos', icon: BellIcon },
    { id: 'navegar', label: 'Navegar entre os diários', icon: DocumentTextIcon }
  ];

  // Nova estrutura organizada por poderes
  const diariosPorPoder = {
    'Poder Executivo': {
      'Federal': [
        { id: 'dou', name: 'Diário Oficial da União (DOU)' },
      ],
      'Estaduais': [
        { id: 'dosp', name: 'Diário Oficial SP' },
        { id: 'dorj', name: 'Diário Oficial RJ' },
        { id: 'domg', name: 'Diário Oficial MG' },
        { id: 'dors', name: 'Diário Oficial RS' },
        { id: 'dopr', name: 'Diário Oficial PR' },
        { id: 'dosc', name: 'Diário Oficial SC' },
        { id: 'doba', name: 'Diário Oficial BA' },
        { id: 'dogo', name: 'Diário Oficial GO' },
      ],
      'Municipais': [
        { id: 'domsaopaulo', name: 'DOM São Paulo' },
        { id: 'domrio', name: 'DOM Rio de Janeiro' },
        { id: 'dombh', name: 'DOM Belo Horizonte' },
        { id: 'domrecife', name: 'DOM Recife' },
        { id: 'domfortaleza', name: 'DOM Fortaleza' },
        { id: 'domsalvador', name: 'DOM Salvador' },
        { id: 'dombrasilia', name: 'DOM Brasília' },
        { id: 'domcuritiba', name: 'DOM Curitiba' },
      ]
    },
    'Poder Judiciário': {
      'Justiça Eleitoral': [
        { id: 'dje', name: 'Diário da Justiça Eleitoral (DJE)' },
      ],
      'Justiça do Trabalho': [
        { id: 'djt', name: 'Diário da Justiça do Trabalho (DJT)' },
      ],
      'Justiça Federal': [
        { id: 'dju', name: 'Diário da Justiça da União (DJU)' },
      ],
      'Justiça Estadual': [
        { id: 'dje-sp', name: 'Diário da Justiça SP' },
        { id: 'dje-rj', name: 'Diário da Justiça RJ' },
        { id: 'dje-mg', name: 'Diário da Justiça MG' },
        { id: 'dje-rs', name: 'Diário da Justiça RS' },
      ]
    },
    'Poder Legislativo': {
      'Tribunais de Contas': [
        { id: 'tcu', name: 'Tribunal de Contas da União (TCU)' },
        { id: 'tce-sp', name: 'Tribunal de Contas SP' },
        { id: 'tce-rj', name: 'Tribunal de Contas RJ' },
        { id: 'tce-mg', name: 'Tribunal de Contas MG' },
      ],
      'Assembleias Legislativas': [
        { id: 'al-sp', name: 'Assembleia Legislativa SP' },
        { id: 'al-rj', name: 'Assembleia Legislativa RJ' },
        { id: 'al-mg', name: 'Assembleia Legislativa MG' },
        { id: 'al-rs', name: 'Assembleia Legislativa RS' },
      ],
      'Câmaras de Vereadores': [
        { id: 'cm-sp', name: 'Câmara Municipal SP' },
        { id: 'cm-rj', name: 'Câmara Municipal RJ' },
        { id: 'cm-bh', name: 'Câmara Municipal BH' },
        { id: 'cm-recife', name: 'Câmara Municipal Recife' },
      ]
    },
    'Ministério Público': [
      { id: 'mpu', name: 'Ministério Público da União (MPU)' },
      { id: 'mpsp', name: 'Ministério Público SP' },
      { id: 'mprj', name: 'Ministério Público RJ' },
      { id: 'mpmg', name: 'Ministério Público MG' },
    ],
    'Defensoria Pública': [
      { id: 'dpu', name: 'Defensoria Pública da União (DPU)' },
      { id: 'dpe-sp', name: 'Defensoria Pública SP' },
      { id: 'dpe-rj', name: 'Defensoria Pública RJ' },
      { id: 'dpe-mg', name: 'Defensoria Pública MG' },
    ]
  };

  // Função para converter estrutura hierárquica em lista plana (para compatibilidade)
  const diarios = Object.entries(diariosPorPoder).flatMap(([poder, subcategorias]) => {
    if (Array.isArray(subcategorias)) {
      // Para MP e DP que são arrays diretos
      return subcategorias.map(diario => ({
        ...diario,
        poder,
        category: poder
      }));
    } else {
      // Para poderes com subcategorias
      return Object.entries(subcategorias).flatMap(([subcategoria, diariosList]) =>
        diariosList.map(diario => ({
          ...diario,
          poder,
          subcategoria,
          category: `${poder} - ${subcategoria}`
        }))
      );
    }
  });

  const periodOptions = [
    { value: 'today', label: 'Hoje' },
    { value: '7d', label: 'Últimos 7 dias' },
    { value: '30d', label: 'Últimos 30 dias' },
    { value: 'custom', label: 'Personalizado' }
  ];

  // Funções auxiliares
  const showToastMessage = (message: string) => {
    setToastMessage(message);
    setShowToast(true);
    setTimeout(() => setShowToast(false), 3000);
  };

  // Funções para histórico de pesquisas
  const addToSearchHistory = (term: string, selectedDiarios: string[], searchPeriod: string, customDateRange?: { start: Date | undefined; end: Date | undefined }) => {
    if (term.trim()) {
      const newEntry = {
        id: Date.now().toString(),
        term: term.trim(),
        selectedDiarios: [...selectedDiarios],
        searchPeriod,
        customDateRange: customDateRange?.start && customDateRange?.end ? {
          start: customDateRange.start.toISOString().split('T')[0],
          end: customDateRange.end.toISOString().split('T')[0]
        } : undefined,
        timestamp: Date.now()
      };
      
      // Remove duplicatas baseadas no termo e filtros
      const filteredHistory = searchHistory.filter(item => 
        !(item.term === newEntry.term && 
          JSON.stringify(item.selectedDiarios.sort()) === JSON.stringify(newEntry.selectedDiarios.sort()) &&
          item.searchPeriod === newEntry.searchPeriod)
      );
      
      const newHistory = [newEntry, ...filteredHistory].slice(0, 5);
      setSearchHistory(newHistory);
      localStorage.setItem('searchHistory', JSON.stringify(newHistory));
    }
  };

  const loadSearchHistory = () => {
    const saved = localStorage.getItem('searchHistory');
    if (saved) {
      try {
        setSearchHistory(JSON.parse(saved));
      } catch (error) {
        console.error('Erro ao carregar histórico de pesquisas:', error);
      }
    }
  };

  const clearSearchHistory = () => {
    setSearchHistory([]);
    localStorage.removeItem('searchHistory');
  };

  const selectFromHistory = (historyItem: typeof searchHistory[0]) => {
    setSearchInput(historyItem.term);
    setSearchTerms([historyItem.term]);
    setSelectedDiarios([...historyItem.selectedDiarios]);
    setSearchPeriod(historyItem.searchPeriod);
    if (historyItem.customDateRange) {
      setCustomDateRange({
        start: new Date(historyItem.customDateRange.start),
        end: new Date(historyItem.customDateRange.end)
      });
    }
    
    // Expandir categorias necessárias para os diários selecionados
    const newExpandedPoderes: Record<string, boolean> = {};
    const newExpandedSubcategorias: Record<string, boolean> = {};
    
    historyItem.selectedDiarios.forEach(diarioId => {
      // Encontrar o poder e subcategoria do diário
      for (const [poder, subcategorias] of Object.entries(diariosPorPoder)) {
        for (const [subcategoria, diarios] of Object.entries(subcategorias)) {
          if (Array.isArray(diarios) && diarios.some(d => d.id === diarioId)) {
            newExpandedPoderes[poder] = true;
            newExpandedSubcategorias[`${poder}-${subcategoria}`] = true;
          }
        }
      }
    });
    
    setExpandedPoderes(newExpandedPoderes);
    setExpandedSubcategorias(newExpandedSubcategorias);
    
    setShowSearchHistory(false);
    setSearchInputFocused(false);
  };

  const removeFromHistory = (id: string) => {
    const newHistory = searchHistory.filter(item => item.id !== id);
    setSearchHistory(newHistory);
    localStorage.setItem('searchHistory', JSON.stringify(newHistory));
    
    // Só fecha o combobox se não há mais histórico
    if (newHistory.length === 0) {
      setShowSearchHistory(false);
      setSearchInputFocused(false);
    }
  };

  // Funções separadas para histórico de pesquisas da sub-aba Monitorar termos
  const addToMonitorSearchHistory = (term: string, selectedDiarios: string[], searchPeriod: string, customDateRange?: { start: Date | undefined; end: Date | undefined }) => {
    if (term.trim()) {
      const newEntry = {
        id: Date.now().toString(),
        term: term.trim(),
        selectedDiarios: [...selectedDiarios],
        searchPeriod,
        customDateRange: customDateRange ? {
          start: customDateRange.start?.toISOString() || '',
          end: customDateRange.end?.toISOString() || ''
        } : undefined,
        timestamp: Date.now()
      };

      setMonitorSearchHistory(prev => {
        // Remove duplicatas baseadas no termo e filtros
        const filtered = prev.filter(item => 
          !(item.term === newEntry.term && 
            JSON.stringify(item.selectedDiarios.sort()) === JSON.stringify(newEntry.selectedDiarios.sort()) &&
            item.searchPeriod === newEntry.searchPeriod)
        );
        
        // Adiciona o novo item no início e limita a 5 itens
        const newHistory = [newEntry, ...filtered].slice(0, 5);
        localStorage.setItem('monitorSearchHistory', JSON.stringify(newHistory));
        return newHistory;
      });
    }
  };

  const loadMonitorSearchHistory = () => {
    if (typeof window !== 'undefined') {
      try {
        const saved = localStorage.getItem('monitorSearchHistory');
        if (saved) {
          setMonitorSearchHistory(JSON.parse(saved));
        }
      } catch (error) {
        console.error('Erro ao carregar histórico de pesquisas do monitor:', error);
      }
    }
  };

  const clearMonitorSearchHistory = () => {
    setMonitorSearchHistory([]);
    localStorage.removeItem('monitorSearchHistory');
  };

  const selectFromMonitorHistory = (historyItem: typeof monitorSearchHistory[0]) => {
    setMonitorSearchInput(historyItem.term);
    setMonitorSearchTerms([historyItem.term]);
    setMonitorSelectedDiarios([...historyItem.selectedDiarios]);
    
    // Expandir categorias e subcategorias relevantes
    const expandedPoderes: Record<string, boolean> = {};
    const expandedSubcategorias: Record<string, boolean> = {};
    
    historyItem.selectedDiarios.forEach(diarioId => {
      const diario = diarios.find(d => d.id === diarioId);
      if (diario) {
        // Encontrar o poder e subcategoria do diário
        Object.entries(diariosPorPoder).forEach(([poder, subcategorias]) => {
          if (Array.isArray(subcategorias)) {
            // Para MP e DP (arrays diretos)
            if (subcategorias.some((d: any) => d.id === diarioId)) {
              expandedPoderes[poder] = true;
            }
          } else {
            // Para poderes com subcategorias
            Object.entries(subcategorias as Record<string, any[]>).forEach(([subcategoria, diariosList]) => {
              if (diariosList.some((d: any) => d.id === diarioId)) {
                expandedPoderes[poder] = true;
                expandedSubcategorias[`${poder}-${subcategoria}`] = true;
              }
            });
          }
        });
      }
    });
    
    setMonitorExpandedPoderes(prev => ({ ...prev, ...expandedPoderes }));
    setMonitorExpandedSubcategorias(prev => ({ ...prev, ...expandedSubcategorias }));
    
    setShowMonitorSearchHistory(false);
    setMonitorSearchInputFocused(false);
  };

  const removeFromMonitorHistory = (id: string) => {
    const newHistory = monitorSearchHistory.filter(item => item.id !== id);
    setMonitorSearchHistory(newHistory);
    localStorage.setItem('monitorSearchHistory', JSON.stringify(newHistory));
    
    // Só fecha o combobox se não há mais histórico
    if (newHistory.length === 0) {
      setShowMonitorSearchHistory(false);
      setMonitorSearchInputFocused(false);
    }
  };

  const handleSearchInputChange = (value: string) => {
    setSearchInput(value);
    if (value.trim()) {
      const terms = value.split(',').map(t => t.trim()).filter(t => t);
      setSearchTerms(terms);
      setShowDiarioDropdown(true);
      // Fechar combobox quando usuário começar a digitar
      setShowSearchHistory(false);
    } else {
      setSearchTerms([]);
      setShowDiarioDropdown(false);
      setShowDateFilters(false);
      // Fechar card de resultados quando input estiver vazio
      setSearchResults([]);
      setHasSearched(false);
      // Reabrir combobox quando input ficar vazio e estiver focado
      if (searchInputFocused) {
        setShowSearchHistory(true);
      }
    }
  };

  const handleRemoveSearchTerm = (index: number) => {
    const newTerms = searchTerms.filter((_, i) => i !== index);
    setSearchTerms(newTerms);
    if (newTerms.length === 0) {
      setSearchInput('');
      setShowDiarioDropdown(false);
      setShowDateFilters(false);
      setHasSearched(false);
      setSearchResults([]);
    } else {
      setSearchInput(newTerms.join(', '));
    }
  };

  const handleDiarioSelect = (diarioId: string) => {
    if (selectedDiarios.includes(diarioId)) {
      const newSelectedDiarios = selectedDiarios.filter(id => id !== diarioId);
      setSelectedDiarios(newSelectedDiarios);
      if (newSelectedDiarios.length === 0) {
        setHasSearched(false);
        setSearchResults([]);
      }
    } else {
      setSelectedDiarios([...selectedDiarios, diarioId]);
    }
  };

  const handleDiarioRemove = (diarioId: string) => {
    const newSelectedDiarios = selectedDiarios.filter(id => id !== diarioId);
    setSelectedDiarios(newSelectedDiarios);
    if (newSelectedDiarios.length === 0) {
      setHasSearched(false);
      setSearchResults([]);
    }
  };

  const handlePeriodSelect = (period: string) => {
    setSearchPeriod(period);
    if (period === 'custom') {
      setShowCustomDateRange(true);
    } else {
      setShowCustomDateRange(false);
    }
  };

  // Função para atualizar data inicial com validação
  const handleStartDateChange = (date: Date | null) => {
    const actualDate = date || undefined;
    setDateValidationError(''); // Limpar erro anterior
    
    if (actualDate) {
      // Se a data final existe e é anterior à nova data inicial, resetar a data final
      if (customDateRange.end && customDateRange.end < actualDate) {
        setCustomDateRange({ start: actualDate, end: undefined });
        setDateValidationError('Data final foi resetada pois era anterior à nova data inicial');
      } else {
        setCustomDateRange({ ...customDateRange, start: actualDate });
      }
    } else {
      setCustomDateRange({ ...customDateRange, start: undefined });
    }
  };

  // Função para atualizar data final com validação
  const handleEndDateChange = (date: Date | null) => {
    const actualDate = date || undefined;
    setDateValidationError(''); // Limpar erro anterior
    
    if (actualDate && customDateRange.start && actualDate < customDateRange.start) {
      // Se a data final é anterior à data inicial, mostrar erro
      setDateValidationError('A data final deve ser igual ou posterior à inicial');
      return;
    }
    setCustomDateRange({ ...customDateRange, end: actualDate });
  };

  const toggleCategory = (category: string) => {
    setExpandedCategories(prev => ({
      ...prev,
      [category]: !prev[category]
    }));
  };

  const toggleMonitorCategory = (category: string) => {
    setMonitorExpandedCategories(prev => ({
      ...prev,
      [category]: !prev[category]
    }));
  };

  const toggleNavegarCategory = useCallback((category: string) => {
    setNavegarExpandedCategories(prev => ({
      ...prev,
      [category]: !prev[category]
    }));
  }, []);

  // Funções de toggle para nova estrutura hierárquica
  const togglePoder = (poder: string, tab: 'buscar' | 'monitorar' | 'navegar') => {
    const setter = tab === 'buscar' ? setExpandedPoderes : 
                   tab === 'monitorar' ? setMonitorExpandedPoderes : 
                   setNavegarExpandedPoderes;
    
    setter(prev => ({
      ...prev,
      [poder]: !prev[poder]
    }));
  };

  const toggleSubcategoria = (poder: string, subcategoria: string, tab: 'buscar' | 'monitorar' | 'navegar') => {
    const key = `${poder}-${subcategoria}`;
    const setter = tab === 'buscar' ? setExpandedSubcategorias : 
                   tab === 'monitorar' ? setMonitorExpandedSubcategorias : 
                   setNavegarExpandedSubcategorias;
    
    setter(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  const toggleSections = useCallback((editionId: string) => {
    const isCurrentlyExpanded = expandedSections[editionId];
    
    if (isCurrentlyExpanded) {
      // Se está expandido, colapsar imediatamente
      setExpandedSections(prev => ({
        ...prev,
        [editionId]: false
      }));
      setSectionAnimations(prev => ({
        ...prev,
        [editionId]: ''
      }));
    } else {
      // Se está colapsado, expandir imediatamente com animação
      setExpandedSections(prev => ({
        ...prev,
        [editionId]: true
      }));
      setSectionAnimations(prev => ({
        ...prev,
        [editionId]: 'animate-in slide-in-from-bottom-2 fade-in-0 duration-200'
      }));
    }
  }, [expandedSections]);


  // Funções para controlar animações dos drawers
  const openDrawer = () => {
    setDrawerAnimation('slide-in');
    setShowDrawer(true);
  };

  const closeDrawer = () => {
    setDrawerAnimation('slide-out');
    setTimeout(() => {
      setShowDrawer(false);
      setDrawerAnimation(null);
    }, 300); // Duração da animação
  };

  const openMonitorDrawer = () => {
    setMonitorDrawerAnimation('slide-in');
    setShowMonitorDrawer(true);
  };

  const closeMonitorDrawer = () => {
    setMonitorDrawerAnimation('slide-out');
    setTimeout(() => {
      setShowMonitorDrawer(false);
      setMonitorDrawerAnimation(null);
    }, 300); // Duração da animação
  };


  const getSelectedDiariosNames = () => {
    return selectedDiarios.map(id => {
      const diario = diarios.find(d => d.id === id);
      return diario ? diario.name : id;
    });
  };

  // Effect para controlar showDateFilters baseado em selectedDiarios
  useEffect(() => {
    if (selectedDiarios.length > 0) {
      setShowDateFilters(true);
    } else {
      setShowDateFilters(false);
    }
  }, [selectedDiarios]);

  // Effect para limpar timeout quando componente for desmontado
  useEffect(() => {
    return () => {
      if (inputTimeout) {
        clearTimeout(inputTimeout);
      }
    };
  }, [inputTimeout]);


  // Função para fazer spotlight na seção de diários
  const highlightDiariosSection = () => {
    setHighlightDiarios(true);
    setTimeout(() => setHighlightDiarios(false), 2000);
    
    // Mostrar toast informativo
    setToast({
      message: 'Selecione pelo menos um diário oficial para habilitar a busca',
      type: 'info',
      isVisible: true
    });
    
    // Scroll para a seção de diários se ela existir
    const diariosSection = document.getElementById('diarios-section');
    if (diariosSection) {
      // Centralizar a seção na tela
      diariosSection.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center',
        inline: 'center'
      });
    }
  };

  const handleSearch = async () => {
    // Se não há termos de busca, não fazer nada
    if (searchTerms.length === 0) return;
    
    // Adicionar pesquisa ao histórico com todos os filtros
    searchTerms.forEach(term => {
      addToSearchHistory(term, selectedDiarios, searchPeriod, customDateRange);
    });
    
    // Se não há diários selecionados, fazer spotlight na seção de diários
    if (selectedDiarios.length === 0) {
      highlightDiariosSection();
      return;
    }
    
    // Verificar se usuário está logado
    const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';
    if (!isLoggedIn) {
      setIsRegisterModalOpen(true);
      return;
    }
    
    setIsSearching(true);
    setHasSearched(true);
    
    // Simular busca com dados mockados
    setTimeout(() => {
      const mockResults = [
        {
          id: 1,
          title: 'Edital de Concurso Público - Secretaria de Educação',
          source: 'DOU',
          date: '2024-01-15',
          excerpt: 'A Secretaria de Educação torna público o edital de concurso público para provimento de vagas...',
          url: '#',
          sections: [
            { id: 's1', name: 'Seção 1', url: '#' },
            { id: 's2', name: 'Seção 2', url: '#' },
            { id: 's3', name: 'Seção 3', url: '#' }
          ]
        },
        {
          id: 2,
          title: 'Pregão Eletrônico nº 001/2024 - Material de Escritório',
          source: 'DOSP',
          date: '2024-01-14',
          excerpt: 'Pregão eletrônico para aquisição de material de escritório conforme especificações...',
          url: '#'
        },
        {
          id: 3,
          title: 'Nomeação de Servidores - Decreto nº 12345',
          source: 'DOU',
          date: '2024-01-13',
          excerpt: 'O Presidente da República, no uso das atribuições que lhe confere o art. 84...',
          url: '#',
          sections: [
            { id: 's1', name: 'Seção 1', url: '#' },
            { id: 's2', name: 'Seção 2', url: '#' },
            { id: 's3', name: 'Seção 3', url: '#' }
          ]
        },
        {
          id: 4,
          title: 'Lei Municipal nº 5.432/2024 - Criação de Cargos',
          source: 'DOM',
          date: '2024-01-12',
          excerpt: 'Dispõe sobre a criação de cargos efetivos na estrutura organizacional da Prefeitura Municipal...',
          url: '#'
        },
        {
          id: 5,
          title: 'Tomada de Preços nº 002/2024 - Serviços de Limpeza',
          source: 'DOSP',
          date: '2024-01-11',
          excerpt: 'Tomada de preços para contratação de serviços de limpeza e conservação de prédios públicos...',
          url: '#'
        },
        {
          id: 6,
          title: 'Concurso Público - Tribunal de Justiça',
          source: 'DOU',
          date: '2024-01-10',
          excerpt: 'Abertura de concurso público para provimento de vagas de Analista Judiciário...',
          url: '#'
        },
        {
          id: 7,
          title: 'Licitação - Aquisição de Medicamentos',
          source: 'DOU',
          date: '2024-01-09',
          excerpt: 'Pregão eletrônico para aquisição de medicamentos para o programa de saúde pública...',
          url: '#'
        },
        {
          id: 8,
          title: 'Portaria nº 789/2024 - Regulamentação',
          source: 'DOU',
          date: '2024-01-08',
          excerpt: 'Regulamenta o funcionamento dos órgãos de fiscalização e controle interno...',
          url: '#'
        }
      ];
      setSearchResults(mockResults);
      setIsSearching(false);
      
      // Scroll para o card de resultados após a busca ser concluída
      setTimeout(() => {
        const resultsCard = document.querySelector('[data-results-card]');
        if (resultsCard) {
          const headerHeight = 80; // Altura aproximada do header
          const elementTop = resultsCard.getBoundingClientRect().top + window.pageYOffset;
          const offsetPosition = elementTop - headerHeight;
          
          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        }
      }, 100);
    }, 2000);
  };

  const handleSaveAsMonitor = async (term: string) => {
    try {
      // Verificar se o termo já foi monitorado
      if (monitoredTerms.has(term)) {
        showToastMessage('Este termo já está sendo monitorado!');
        return;
      }

      // TODO: Implementar chamada para API real
      console.log('Salvando monitoramento:', { term, diarios: selectedDiarios });
      
      const newMonitoramento = {
        id: Date.now(),
        terms: [term],
        diarios: selectedDiarios,
        isActive: true,
        createdAt: new Date().toISOString(),
        occurrences: 0 // Será atualizado pela API
      };
      
      setMonitoramentos([...monitoramentos, newMonitoramento]);
      setMonitoredTerms(prev => new Set([...prev, term]));
      showToastMessage('Monitoramento do termo cadastrado com sucesso');
    } catch (error) {
      console.error('Erro ao salvar monitoramento:', error);
      showToastMessage('Erro ao salvar monitoramento. Tente novamente.');
    }
  };

  // Função para filtrar diários na nova estrutura hierárquica
  const getFilteredDiariosPorPoder = (searchTerm: string) => {
    const filtered = JSON.parse(JSON.stringify(diariosPorPoder)); // Deep clone
    
    if (!searchTerm) return filtered;
    
    const term = searchTerm.toLowerCase();
    
    // Filtrar cada poder
    Object.keys(filtered).forEach(poder => {
      if (Array.isArray(filtered[poder])) {
        // Para MP e DP (arrays diretos)
        filtered[poder] = filtered[poder].filter((diario: { id: string; name: string }) => 
          diario.name.toLowerCase().includes(term)
        );
      } else {
        // Para poderes com subcategorias
        Object.keys(filtered[poder]).forEach(subcategoria => {
          filtered[poder][subcategoria] = filtered[poder][subcategoria].filter((diario: { id: string; name: string }) => 
            diario.name.toLowerCase().includes(term)
          );
        });
      }
    });
    
    return filtered;
  };

  const filteredDiariosPorPoder = getFilteredDiariosPorPoder(diarioSearchTerm);

  // Auto-expandir categorias na aba Buscar Termos quando um diário específico é encontrado
  useEffect(() => {
    if (diarioSearchTerm) {
      const searchTerm = diarioSearchTerm.toLowerCase();
      
      // Verificar se o termo corresponde ao DOU
      if (searchTerm.includes('diário oficial da união') || searchTerm.includes('dou')) {
        setExpandedPoderes(prev => ({
          ...prev,
          'Poder Executivo': true
        }));
        setExpandedSubcategorias(prev => ({
          ...prev,
          'Poder Executivo-Federal': true
        }));
      }
      // Verificar outros diários específicos se necessário
      else if (searchTerm.includes('diário oficial sp') || searchTerm.includes('dosp')) {
        setExpandedPoderes(prev => ({
          ...prev,
          'Poder Executivo': true
        }));
        setExpandedSubcategorias(prev => ({
          ...prev,
          'Poder Executivo-Estaduais': true
        }));
      }
      else if (searchTerm.includes('diário oficial rj') || searchTerm.includes('dorj')) {
        setExpandedPoderes(prev => ({
          ...prev,
          'Poder Executivo': true
        }));
        setExpandedSubcategorias(prev => ({
          ...prev,
          'Poder Executivo-Estaduais': true
        }));
      }
      else if (searchTerm.includes('diário oficial mg') || searchTerm.includes('domg')) {
        setExpandedPoderes(prev => ({
          ...prev,
          'Poder Executivo': true
        }));
        setExpandedSubcategorias(prev => ({
          ...prev,
          'Poder Executivo-Estaduais': true
        }));
      }
      // Para outros poderes, expandir baseado no termo
      else if (searchTerm.includes('judiciário') || searchTerm.includes('justiça')) {
        setExpandedPoderes(prev => ({
          ...prev,
          'Poder Judiciário': true
        }));
      }
      else if (searchTerm.includes('legislativo') || searchTerm.includes('congresso')) {
        setExpandedPoderes(prev => ({
          ...prev,
          'Poder Legislativo': true
        }));
      }
      else if (searchTerm.includes('ministério público') || searchTerm.includes('mp')) {
        setExpandedPoderes(prev => ({
          ...prev,
          'Ministério Público': true
        }));
      }
    } else {
      // Limpar expansões quando o campo de busca estiver vazio
      setExpandedPoderes({});
      setExpandedSubcategorias({});
    }
  }, [diarioSearchTerm]);

  // Filtros para aba de monitoramentos (removido - usando função específica abaixo)

  // Auto-expandir categorias na aba Monitorar termos quando um diário específico é encontrado
  useEffect(() => {
    if (monitorDiarioSearchTerm) {
      const searchTerm = monitorDiarioSearchTerm.toLowerCase();
      
      // Verificar se o termo corresponde ao DOU
      if (searchTerm.includes('diário oficial da união') || searchTerm.includes('dou')) {
        setMonitorExpandedPoderes(prev => ({
          ...prev,
          'Poder Executivo': true
        }));
        setMonitorExpandedSubcategorias(prev => ({
          ...prev,
          'Poder Executivo-Federal': true
        }));
      }
      // Verificar outros diários específicos se necessário
      else if (searchTerm.includes('diário oficial sp') || searchTerm.includes('dosp')) {
        setMonitorExpandedPoderes(prev => ({
          ...prev,
          'Poder Executivo': true
        }));
        setMonitorExpandedSubcategorias(prev => ({
          ...prev,
          'Poder Executivo-Estaduais': true
        }));
      }
      else if (searchTerm.includes('diário oficial rj') || searchTerm.includes('dorj')) {
        setMonitorExpandedPoderes(prev => ({
          ...prev,
          'Poder Executivo': true
        }));
        setMonitorExpandedSubcategorias(prev => ({
          ...prev,
          'Poder Executivo-Estaduais': true
        }));
      }
      else if (searchTerm.includes('diário oficial mg') || searchTerm.includes('domg')) {
        setMonitorExpandedPoderes(prev => ({
          ...prev,
          'Poder Executivo': true
        }));
        setMonitorExpandedSubcategorias(prev => ({
          ...prev,
          'Poder Executivo-Estaduais': true
        }));
      }
      // Para outros poderes, expandir baseado no termo
      else if (searchTerm.includes('judiciário') || searchTerm.includes('justiça')) {
        setMonitorExpandedPoderes(prev => ({
          ...prev,
          'Poder Judiciário': true
        }));
      }
      else if (searchTerm.includes('legislativo') || searchTerm.includes('congresso')) {
        setMonitorExpandedPoderes(prev => ({
          ...prev,
          'Poder Legislativo': true
        }));
      }
      else if (searchTerm.includes('ministério público') || searchTerm.includes('mp')) {
        setMonitorExpandedPoderes(prev => ({
          ...prev,
          'Ministério Público': true
        }));
      }
    } else {
      // Limpar expansões quando o campo de busca estiver vazio
      setMonitorExpandedPoderes({});
      setMonitorExpandedSubcategorias({});
    }
  }, [monitorDiarioSearchTerm]);

  // Filtros para aba Navegar
  const filteredNavegarDiariosPorPoder = getFilteredDiariosPorPoder(navegarDiarioSearchTerm);

  // Auto-expandir categorias quando um diário específico é encontrado
  useEffect(() => {
    if (navegarDiarioSearchTerm) {
      const searchTerm = navegarDiarioSearchTerm.toLowerCase();
      
      // Verificar se o termo corresponde ao DOU
      if (searchTerm.includes('diário oficial da união') || searchTerm.includes('dou')) {
        setNavegarExpandedPoderes(prev => ({
          ...prev,
          'Poder Executivo': true
        }));
        setNavegarExpandedSubcategorias(prev => ({
          ...prev,
          'Poder Executivo-Federal': true
        }));
      }
      // Verificar outros diários específicos se necessário
      else if (searchTerm.includes('diário oficial sp') || searchTerm.includes('dosp')) {
        setNavegarExpandedPoderes(prev => ({
          ...prev,
          'Poder Executivo': true
        }));
        setNavegarExpandedSubcategorias(prev => ({
          ...prev,
          'Poder Executivo-Estaduais': true
        }));
      }
      else if (searchTerm.includes('diário oficial rj') || searchTerm.includes('dorj')) {
        setNavegarExpandedPoderes(prev => ({
          ...prev,
          'Poder Executivo': true
        }));
        setNavegarExpandedSubcategorias(prev => ({
          ...prev,
          'Poder Executivo-Estaduais': true
        }));
      }
      else if (searchTerm.includes('diário oficial mg') || searchTerm.includes('domg')) {
        setNavegarExpandedPoderes(prev => ({
          ...prev,
          'Poder Executivo': true
        }));
        setNavegarExpandedSubcategorias(prev => ({
          ...prev,
          'Poder Executivo-Estaduais': true
        }));
      }
      // Para outros poderes, expandir baseado no termo
      else if (searchTerm.includes('judiciário') || searchTerm.includes('justiça')) {
        setNavegarExpandedPoderes(prev => ({
          ...prev,
          'Poder Judiciário': true
        }));
      }
      else if (searchTerm.includes('legislativo') || searchTerm.includes('congresso')) {
        setNavegarExpandedPoderes(prev => ({
          ...prev,
          'Poder Legislativo': true
        }));
      }
      else if (searchTerm.includes('ministério público') || searchTerm.includes('mp')) {
        setNavegarExpandedPoderes(prev => ({
          ...prev,
          'Ministério Público': true
        }));
      }
    } else {
      // Limpar expansões quando o campo de busca estiver vazio
      setNavegarExpandedPoderes({});
      setNavegarExpandedSubcategorias({});
    }
  }, [navegarDiarioSearchTerm]);

  // useEffect para carregar histórico de pesquisas
  useEffect(() => {
    loadSearchHistory();
    loadMonitorSearchHistory();
  }, []);

  // useEffect para expandir automaticamente Poder Executivo > Federal
  useEffect(() => {
    setExpandedPoderes(prev => ({
      ...prev,
      'Poder Executivo': true
    }));
    setExpandedSubcategorias(prev => ({
      ...prev,
      'Poder Executivo-Federal': true
    }));
  }, []);

  // Função para verificar se um diário tem múltiplas seções
  const hasMultipleSections = (diarioId: string) => {
    const diariosComMultiplasSecoes = [
      'dou', // Diário Oficial da União - tem múltiplas seções
      'dju', // Diário da Justiça da União - pode ter múltiplas seções
      'dje', // Diário da Justiça Eleitoral - pode ter múltiplas seções
      'djt'  // Diário da Justiça do Trabalho - pode ter múltiplas seções
    ];
    return diariosComMultiplasSecoes.includes(diarioId);
  };

  // Funções da aba Monitorar
  const processAndAddTerms = (input: string) => {
    if (!input.trim()) return;
    
    // Suporta múltiplos separadores: vírgula, espaço, quebra de linha, ponto e vírgula
    const terms = input.split(/[,\s\n;]+/)
      .map(term => term.trim())
      .filter(term => term && term.length > 1);
    
    if (terms.length > 0) {
      // Para simplificar, vamos usar apenas o primeiro termo
      setMonitorTerm(terms[0]);
      setValidationError('');
    }
    
    setMonitorTermInput('');
  };

  const handleAddMonitorTerm = (term: string) => {
    processAndAddTerms(term);
  };

  const handleRemoveMonitorTerm = () => {
    setMonitorTerm('');
    setValidationError('');
  };

  const handleTermInputKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' || e.key === ',') {
      e.preventDefault();
      const term = e.key === ',' ? monitorTermInput.slice(0, -1) : monitorTermInput;
      handleAddMonitorTerm(term);
    }
  };

  const handleTermInputChange = (value: string) => {
    setMonitorTermInput(value);
    setValidationError('');
    
    // Limpa timeout anterior se existir
    if (inputTimeout) {
      clearTimeout(inputTimeout);
    }
    
    // Adiciona termo imediatamente se detectar separadores
    if (value.includes(',') || value.includes(';') || value.includes('\n')) {
      processAndAddTerms(value);
      return;
    }
    
    // Adiciona termo após pausa de 1.5 segundos (se tiver pelo menos 3 caracteres)
    if (value.trim().length >= 3) {
      const timeout = setTimeout(() => {
        processAndAddTerms(value);
      }, 1500);
      setInputTimeout(timeout);
    }
  };

  const handleCreateMonitoramento = () => {
    setValidationError('');
    setHasClickedCreateMonitor(true);
    
    // Verificar se usuário está logado
    const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';
    if (!isLoggedIn) {
      setIsRegisterModalOpen(true);
      return;
    }
    
    // Validação mais robusta
    const term = monitorTerm?.trim();
    if (!term || term.length === 0) {
      setValidationError('Adicione um termo para monitorar');
      return;
    }
    
    if (!monitorDiarios || monitorDiarios.length === 0) {
      setValidationError('Selecione pelo menos 1 diário oficial');
      return;
    }
    
    // Criar novo monitoramento
    const newMonitoramento = {
      id: Date.now(),
      terms: [term],
      diarios: [...monitorDiarios],
      isActive: true,
      createdAt: new Date().toISOString(),
      occurrences: 0
    };
    
    // Atualizar estado usando função callback para garantir que a atualização seja aplicada
    setMonitoramentos(prev => [...prev, newMonitoramento]);
    
    // Limpar formulário
    setMonitorTerm('');
    setMonitorDiarios([]);
    setMonitorTermInput('');
    setShowCreateForm(false);
    setValidationError('');
    
    showToastMessage('Monitoramento criado com sucesso!');
  };

  const handleCreateMonitoramentoFromSearch = () => {
    // Se não há diários selecionados, fazer spotlight na seção de diários
    if (monitorSelectedDiarios.length === 0) {
      setMonitorHighlightDiarios(true);
      setTimeout(() => setMonitorHighlightDiarios(false), 2000);
      
      // Mostrar toast informativo
      setToast({
        message: 'Selecione pelo menos um diário oficial',
        type: 'info',
        isVisible: true
      });
      
      // Scroll para a seção de diários se ela existir
      const diariosSection = document.getElementById('monitor-diarios-section');
      if (diariosSection) {
        diariosSection.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center',
          inline: 'center'
        });
      }
      return;
    }

    // Se há diários selecionados, criar o monitoramento
    if (monitorSearchTerms.length > 0 && monitorSelectedDiarios.length > 0) {
      const newMonitoramento = {
        id: Date.now(),
        terms: [...monitorSearchTerms],
        diarios: [...monitorSelectedDiarios],
        isActive: true,
        createdAt: new Date().toISOString(),
        occurrences: 0
      };
      
      setMonitoramentos(prev => [...prev, newMonitoramento]);
      
      // Adicionar ao histórico de busca da sub-aba Monitorar Termos
      addToMonitorSearchHistory(
        monitorSearchTerms.join(', '),
        [...monitorSelectedDiarios],
        '7d' // Período padrão para monitoramento
      );
      
      // Limpar formulário de busca
      setMonitorSearchInput('');
      setMonitorSearchTerms([]);
      setMonitorSelectedDiarios([]);
      
      // Mostrar toast de sucesso
      setToast({
        message: 'Alerta de monitoramento criado com sucesso!',
        type: 'success',
        isVisible: true
      });
    }
  };

  // Funções específicas para sub-aba "Monitorar Termos"
  const handleMonitorSearchInputChange = (value: string) => {
    setMonitorSearchInput(value);
    if (value.trim()) {
      const terms = value.split(',').map(t => t.trim()).filter(t => t);
      setMonitorSearchTerms(terms);
      setShowDiarioDropdown(true);
      // Fechar combobox quando usuário começar a digitar
      setShowMonitorSearchHistory(false);
    } else {
      setMonitorSearchTerms([]);
      setShowDiarioDropdown(false);
      setShowDateFilters(false);
      // Fechar card de resultados quando input estiver vazio
      setSearchResults([]);
      setHasSearched(false);
      // Reabrir combobox quando input ficar vazio e estiver focado
      if (monitorSearchInputFocused) {
        setShowMonitorSearchHistory(true);
      }
    }
  };

  const handleMonitorRemoveSearchTerm = (index: number) => {
    const newTerms = monitorSearchTerms.filter((_, i) => i !== index);
    setMonitorSearchTerms(newTerms);
    setMonitorSearchInput(newTerms.join(', '));
    
    if (newTerms.length === 0) {
      setShowDiarioDropdown(false);
      setShowDateFilters(false);
      setSearchResults([]);
      setHasSearched(false);
    }
  };

  const handleMonitorDiarioSelect = (diarioId: string) => {
    if (monitorSelectedDiarios.includes(diarioId)) {
      setMonitorSelectedDiarios(monitorSelectedDiarios.filter(id => id !== diarioId));
    } else {
      setMonitorSelectedDiarios([...monitorSelectedDiarios, diarioId]);
    }
  };

  const toggleMonitorPoder = (poder: string, tab: string) => {
    setMonitorExpandedPoderes(prev => ({
      ...prev,
      [poder]: !prev[poder]
    }));
  };

  const toggleMonitorSubcategoria = (poder: string, subcategoria: string, tab: string) => {
    const key = `${poder}-${subcategoria}`;
    setMonitorExpandedSubcategorias(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  // Filtrar diários para sub-aba "Monitorar Termos"
  const filteredMonitorDiariosPorPoder = useMemo(() => {
    if (!monitorDiarioSearchTerm.trim()) {
      return diariosPorPoder;
    }
    
    const searchLower = monitorDiarioSearchTerm.toLowerCase();
    const filtered: Record<string, any> = {};
    
    Object.entries(diariosPorPoder).forEach(([poder, subcategorias]) => {
      if (Array.isArray(subcategorias)) {
        // Para MP e DP (arrays diretos)
        const filteredDiarios = subcategorias.filter((diario: any) => 
          diario.name.toLowerCase().includes(searchLower)
        );
        if (filteredDiarios.length > 0) {
          filtered[poder] = filteredDiarios;
        }
      } else {
        // Para poderes com subcategorias
        const filteredSubcategorias: Record<string, any[]> = {};
        Object.entries(subcategorias as Record<string, any[]>).forEach(([subcategoria, diariosList]) => {
          const filteredDiarios = diariosList.filter((diario: any) => 
            diario.name.toLowerCase().includes(searchLower)
          );
          if (filteredDiarios.length > 0) {
            filteredSubcategorias[subcategoria] = filteredDiarios;
          }
        });
        if (Object.keys(filteredSubcategorias).length > 0) {
          filtered[poder] = filteredSubcategorias;
        }
      }
    });
    
    return filtered;
  }, [monitorDiarioSearchTerm, diariosPorPoder]);

  // Função de teste para criar monitoramento de contexto
  const handleCreateContextMonitor = () => {
    const newContextMonitor = {
      id: Date.now(),
      terms: ['monitoramento de contexto'],
      diarios: ['dou'],
      isActive: true,
      createdAt: new Date().toISOString(),
      occurrences: Math.floor(Math.random() * 20) + 1
    };
    
    setMonitoramentos(prev => [...prev, newContextMonitor]);
    showToastMessage('Monitoramento de contexto criado com sucesso!');
  };

  const handleToggleMonitoramento = (id: number) => {
    setMonitoramentos(monitoramentos.map(m => 
      m.id === id ? { ...m, isActive: !m.isActive } : m
    ));
  };

  const handleDeleteMonitoramento = (id: number) => {
    setDeletingMonitoringId(id);
    setShowDeleteModal(true);
  };

  const confirmDelete = () => {
    if (deletingMonitoringId) {
      setMonitoramentos(monitoramentos.filter(m => m.id !== deletingMonitoringId));
      showToastMessage('Monitoramento excluído com sucesso!');
      setShowDeleteModal(false);
      setDeletingMonitoringId(null);
    }
  };

  const handleEditMonitoramento = (id: number) => {
    const monitor = monitoramentos.find(m => m.id === id);
    if (monitor) {
      setEditingMonitor(id);
      setMonitorTerm(monitor.terms[0] || '');
      setMonitorDiarios([...monitor.diarios]);
      setMonitorTermInput('');
    }
  };

  const handleSaveEditMonitoramento = () => {
    if (!monitorTerm || !monitorTerm.trim()) {
      setValidationError('Adicione um termo para monitorar');
      return;
    }
    
    if (monitorDiarios.length === 0) {
      setValidationError('Selecione pelo menos 1 diário oficial');
      return;
    }

    setMonitoramentos(monitoramentos.map(m => 
      m.id === editingMonitor 
        ? { ...m, terms: [monitorTerm!.trim()], diarios: [...monitorDiarios] }
        : m
    ));
    
    setEditingMonitor(null);
    setMonitorTerm('');
    setMonitorDiarios([]);
    setMonitorTermInput('');
    setValidationError('');
    setShowCreateForm(false);
    showToastMessage('Monitoramento atualizado com sucesso!');
  };

  const handleCancelEdit = () => {
    setEditingMonitor(null);
    setMonitorTerm('');
    setMonitorDiarios([]);
    setMonitorTermInput('');
    setValidationError('');
    setShowCreateForm(false);
    
    // Se não há monitoramentos, resetar o estado para mostrar a mensagem novamente
    if (monitoramentos.length === 0) {
      setHasClickedCreateMonitor(false);
    }
  };

  const handleInputBlur = () => {
    // Processa termos quando o usuário sai do campo
    if (monitorTermInput.trim().length >= 2) {
      processAndAddTerms(monitorTermInput);
    }
    
    // Limpa timeout se existir
    if (inputTimeout) {
      clearTimeout(inputTimeout);
      setInputTimeout(null);
    }
  };

  const handleInputFocus = () => {
    // Limpa timeout quando o usuário volta ao campo
    if (inputTimeout) {
      clearTimeout(inputTimeout);
      setInputTimeout(null);
    }
  };

  return (
    <div className="bg-transparent min-h-screen">
      <TransparentHeader 
        currentPage="diarios-oficiais" 
        onTrialClick={() => setIsTestModalOpen(true)} 
      />

      {/* Hero Section */}
      <section className="relative pt-24 pb-8 sm:pt-28 sm:pb-12 md:pt-32 md:pb-16 lg:pt-36 fade-in-up">
        {/* Gradiente sutil */}
        <div className="absolute inset-x-0 -top-40 -z-10 transform-gpu overflow-hidden blur-3xl sm:-top-80">
          <div className="relative left-[calc(50%-11rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-[#3b82f6] to-[#8b5cf6] opacity-10 sm:left-[calc(50%-30rem)] sm:w-[72.1875rem]"></div>
        </div>
        
        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
            <div className="text-center">
            <h1 className="text-lg font-bold tracking-tight text-white sm:text-xl md:text-2xl lg:text-3xl xl:text-4xl leading-tight fade-in-delay-1">
              <span className="bg-clip-text text-transparent bg-gradient-to-r from-blue-300 via-indigo-300 to-purple-300" style={{ lineHeight: '1.2', paddingBottom: '2px' }}>Diários Oficiais</span>
            </h1>
            <p className="mt-3 text-base text-gray-300 max-w-2xl mx-auto sm:text-lg sm:mt-4 fade-in-delay-2">
              Pesquise publicações, crie monitoramentos e navegue pelas edições oficiais.
            </p>
          </div>
        </div>
      </section>

      {/* Main Content */}
      <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 pb-16 sm:pb-20 md:pb-24 fade-in-delay-3">
        {/* Segmented Control */}
        <div className="mb-8 sm:mb-10 md:mb-12">
          <div className="bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-1 inline-flex w-full sm:w-auto">
            {tabs.map((tab) => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center justify-center gap-2 px-3 py-2 rounded-lg text-xs sm:text-sm font-medium transition-all duration-200 flex-1 sm:flex-none cursor-pointer ${
                    activeTab === tab.id
                      ? 'bg-blue-600 text-white shadow-lg'
                      : 'text-gray-300 hover:text-white hover:bg-white/5'
                  }`}
                >
                  <Icon className="h-4 w-4" />
                  <span className="sm:inline">{tab.label}</span>
                </button>
              );
            })}
          </div>
        </div>

        {/* Tab Content */}
          {activeTab === 'buscar' && (
          <div className="bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10 p-3 sm:p-4 md:p-6">
            <div className="space-y-4 sm:space-y-6 fade-in">
              {/* Header */}
              <div>
                <h3 className="text-base font-semibold text-white sm:text-lg">Buscar Publicações</h3>
                <p className="text-sm text-gray-400 sm:text-base">Digite um termo e filtre por diários e período de publicação</p>
              </div>

              {/* Campo de busca principal */}
              <div className="relative">
                <div className="input-with-icon relative">
                <MagnifyingGlassIcon className="input-icon h-5 w-5 text-gray-400" />
                <input
                  type="text"
                  value={searchInput}
                  onChange={(e) => handleSearchInputChange(e.target.value)}
                    onFocus={() => {
                      setSearchInputFocused(true);
                      // Só abre o combobox se o input estiver vazio
                      if (!searchInput.trim()) {
                        setShowSearchHistory(true);
                      }
                    }}
                    onBlur={() => {
                      // Delay para permitir clique no dropdown
                      setTimeout(() => {
                        setSearchInputFocused(false);
                        // Só fecha o combobox se não há histórico ou se não está focado
                        if (searchHistory.length === 0) {
                          setShowSearchHistory(false);
                        }
                      }, 200);
                    }}
                    placeholder="ex.: João da Silva"
                    className="input-standard text-base font-medium pr-10"
                  />
                  {searchInput && (
                    <button
                      onClick={() => {
                        setSearchInput('');
                        setSearchTerms([]);
                        setSearchResults([]);
                        setHasSearched(false);
                      }}
                      className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors cursor-pointer"
                    >
                      <XMarkIcon className="h-4 w-4" />
                    </button>
                  )}
              </div>

                {/* Dropdown de histórico de pesquisas */}
                {showSearchHistory && searchHistory.length > 0 && searchInputFocused && (
                  <div className="absolute top-full left-0 right-0 mt-1 bg-gray-900/95 backdrop-blur-sm border border-gray-700/50 rounded-lg shadow-xl z-50 max-h-60 overflow-y-auto">
                    <div className="p-2">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-xs text-gray-400 font-medium">Pesquisas recentes</span>
                        <button
                          onClick={clearSearchHistory}
                          className="text-xs text-gray-500 hover:text-gray-300 transition-colors cursor-pointer"
                        >
                          Limpar
                        </button>
                      </div>
                      {searchHistory.map((historyItem) => (
                        <div key={historyItem.id} className="flex items-center gap-2 px-3 py-2 text-sm text-gray-300 hover:bg-white/10 hover:text-white rounded-md group">
                          <button
                            onClick={() => selectFromHistory(historyItem)}
                            className="flex-1 text-left flex items-center gap-2 cursor-pointer"
                          >
                            <MagnifyingGlassIcon className="h-4 w-4 text-gray-400" />
                            <div className="flex flex-col">
                              <span className="font-medium">{historyItem.term}</span>
                              <span className="text-xs text-gray-400">
                                {historyItem.selectedDiarios.length > 0 
                                  ? `${historyItem.selectedDiarios.length} diário(s) • ${periodOptions.find(p => p.value === historyItem.searchPeriod)?.label || historyItem.searchPeriod}`
                                  : 'Sem diários selecionados'
                                }
                              </span>
                            </div>
                          </button>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              removeFromHistory(historyItem.id);
                            }}
                            className="opacity-0 group-hover:opacity-100 text-gray-500 hover:text-red-400 cursor-pointer"
                          >
                            <XMarkIcon className="h-4 w-4" />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                        </div>
                        
              {/* Filtros Ativos - badges compactas abaixo da barra de digitação */}
              {searchTerms.length > 0 && (
                <div className="flex flex-wrap gap-2 mt-3">
                          {/* Termos de busca */}
                          {searchTerms.map((term, index) => (
                            <span
                              key={index}
                      className="inline-flex items-center gap-1 px-2 py-1 bg-blue-500/20 text-blue-200 rounded-full border border-blue-400/30 text-xs hover:bg-blue-500/30 transition-colors cursor-pointer"
                            >
                              <span>🔍</span>
                              {term}
                              <button
                                onClick={() => handleRemoveSearchTerm(index)}
                        className="ml-1 hover:text-blue-100 transition-colors"
                              >
                                <XMarkIcon className="h-3 w-3" />
                              </button>
                            </span>
                          ))}
                  
                  {/* Período selecionado */}
                  {searchPeriod && (
                    <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-500/20 text-blue-200 rounded-full border border-blue-400/30 text-xs hover:bg-blue-500/30 transition-colors cursor-pointer">
                      <span>📅</span>
                      {searchPeriod === 'custom' ? 'Período personalizado' : periodOptions.find(p => p.value === searchPeriod)?.label}
                      <button
                        onClick={() => setSearchPeriod('')}
                        className="ml-1 hover:text-blue-100 transition-colors"
                      >
                        <XMarkIcon className="h-3 w-3" />
                      </button>
                    </span>
                  )}
                          
                          {/* Diários selecionados */}
                          {selectedDiarios.map((diarioId) => {
                            const diario = diarios.find(d => d.id === diarioId);
                            return (
                              <span
                                key={diarioId}
                        className="inline-flex items-center gap-1 px-2 py-1 bg-green-500/20 text-green-200 rounded-full border border-green-400/30 text-xs hover:bg-green-500/30 transition-colors cursor-pointer"
                              >
                                <span>📰</span>
                                {diario?.name}
                                <button
                                  onClick={() => handleDiarioRemove(diarioId)}
                          className="ml-1 hover:text-green-100 transition-colors"
                                >
                                  <XMarkIcon className="h-3 w-3" />
                                </button>
                              </span>
                            );
                          })}
                      </div>
                  )}

              {/* Filtros com Reveal Animado */}
              <div className="space-y-6">
                {/* Seleção de Diários - sempre visível para scroll funcionar */}
                <div id="diarios-section" className={searchTerms.length > 0 ? 'animate-in slide-in-from-bottom-2 duration-300' : 'hidden'}>
                        <label className="block text-sm font-medium text-gray-300 mb-4">
                          Selecione os diários oficiais
                        </label>
                        
                        {/* Dropdown com busca */}
                      <div className={`bg-white/5 border border-white/20 rounded-xl p-4 sm:p-6 transition-all duration-500 ${highlightDiarios ? 'ring-4 ring-blue-500/50 bg-blue-500/10' : ''}`}>
                          {/* Busca global */}
                          <div className="mb-6">
                            <div className="input-with-icon relative">
                              <MagnifyingGlassIcon className="input-icon h-5 w-5 text-gray-400" />
                              <input
                                type="text"
                                value={diarioSearchTerm}
                                onChange={(e) => setDiarioSearchTerm(e.target.value)}
                                placeholder="Buscar em todos os diários..."
                                className="w-full pl-10 pr-10 py-3 bg-gradient-to-r from-blue-500/5 to-green-500/5 border border-blue-400/20 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                              />
                              {diarioSearchTerm && (
                                <button
                                  onClick={() => setDiarioSearchTerm('')}
                                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors cursor-pointer"
                                >
                                  <XMarkIcon className="h-4 w-4" />
                                </button>
                              )}
                            </div>
                          </div>

                          {/* Lista de diários por poder */}
                          <div className="space-y-4 max-h-64 overflow-y-auto">
                            {Object.entries(filteredDiariosPorPoder).map(([poder, subcategorias]) => {
                              const totalDiarios = Array.isArray(subcategorias) 
                                ? subcategorias.length 
                                : Object.values(subcategorias as Record<string, any[]>).flat().length;
                              
                              return (
                                <div key={poder}>
                                  <button
                                    onClick={() => togglePoder(poder, 'buscar')}
                                    className="flex items-center justify-between w-full text-left py-3 px-3 text-gray-300 hover:text-white font-medium bg-white/5 rounded-lg hover:bg-white/10 transition-all duration-200 cursor-pointer"
                                  >
                                    <span className="font-semibold text-sm">{poder} ({totalDiarios})</span>
                                    <span className="transform transition-transform duration-200 text-blue-400">
                                      {expandedPoderes[poder] ? '−' : '+'}
                                    </span>
                                  </button>
                                  
                                  {expandedPoderes[poder] && (
                                    <div className="ml-4 space-y-3 mt-2">
                                      {Array.isArray(subcategorias) ? (
                                        // Para MP e DP (arrays diretos)
                                        <div className="space-y-2">
                                          {subcategorias.map((diario) => (
                                            <label key={diario.id} className="flex items-center gap-3 py-2 px-3 text-sm text-gray-300 hover:text-white cursor-pointer rounded-lg hover:bg-white/5 transition-all duration-200">
                                              <input
                                                type="checkbox"
                                                checked={selectedDiarios.includes(diario.id)}
                                                onChange={() => handleDiarioSelect(diario.id)}
                                                className="w-4 h-4 border-2 border-gray-300 rounded-full focus:ring-2 focus:ring-blue-500 focus:ring-offset-0"
                                              />
                                              <span className="flex-1">{diario.name}</span>
                                            </label>
                                          ))}
                                        </div>
                                      ) : (
                                        // Para poderes com subcategorias
                                        Object.entries(subcategorias as Record<string, any[]>).map(([subcategoria, diariosList]) => (
                                          <div key={subcategoria}>
                                            <button
                                              onClick={() => toggleSubcategoria(poder, subcategoria, 'buscar')}
                                              className="flex items-center justify-between w-full text-left py-2 px-3 text-gray-300 hover:text-white font-medium bg-white/5 rounded-lg hover:bg-white/10 transition-all duration-200 cursor-pointer"
                                            >
                                              <span className="font-medium text-xs">{subcategoria} ({diariosList.length})</span>
                                              <span className="transform transition-transform duration-200 text-blue-400">
                                                {expandedSubcategorias[`${poder}-${subcategoria}`] ? '−' : '+'}
                                              </span>
                                            </button>
                                            
                                            {expandedSubcategorias[`${poder}-${subcategoria}`] && (
                                              <div className="ml-4 space-y-1 mt-2">
                                                {diariosList.map((diario: { id: string; name: string }) => (
                                                  <label key={diario.id} className="flex items-center gap-3 py-2 px-3 text-sm text-gray-300 hover:text-white cursor-pointer rounded-lg hover:bg-white/5 transition-all duration-200">
                                                    <input
                                                      type="checkbox"
                                                      checked={selectedDiarios.includes(diario.id)}
                                                      onChange={() => handleDiarioSelect(diario.id)}
                                                      className=""
                                                    />
                                                    <span className="flex-1">{diario.name}</span>
                                                  </label>
                                                ))}
                                              </div>
                                            )}
                                          </div>
                                        ))
                                      )}
                                    </div>
                                  )}
                                </div>
                              );
                            })}
                          </div>
                        </div>

                      </div>
                      </div>

                {/* Filtros de data - só aparece quando há termos digitados */}
                {searchTerms.length > 0 && (
                  <div>
                        <label className="block text-sm font-medium text-gray-300 mb-4">
                          Período de publicação
                        </label>
                        
                        {/* Botões de período */}
                        <div className="grid grid-cols-2 sm:flex sm:flex-wrap gap-2 sm:gap-3 mb-6 sm:mb-8">
                          {periodOptions.map((option) => (
                            <button
                              key={option.value}
                              onClick={() => handlePeriodSelect(option.value)}
                              className={`px-3 py-2 sm:px-5 sm:py-3 rounded-xl text-xs sm:text-sm font-medium transition-all duration-200 cursor-pointer ${
                                searchPeriod === option.value
                                  ? 'bg-blue-600 text-white shadow-lg shadow-blue-600/25'
                                  : 'bg-white/10 text-gray-300 hover:bg-white/20 hover:text-white border border-white/20 hover:border-white/30'
                              }`}
                            >
                              {option.label}
                            </button>
                          ))}
                        </div>

                        {/* Date range picker customizado moderno */}
                        {showCustomDateRange && (
                          <div className="bg-white/5 border border-white/20 rounded-xl p-3 sm:p-4 animate-in slide-in-from-bottom-2 duration-300">
                            <h4 className="text-sm font-medium text-gray-300 mb-4 sm:mb-6 flex items-center gap-2">
                              <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                              Período personalizado
                            </h4>
                            <div className="flex flex-col sm:flex-row gap-6 items-end">
                              <div className="flex-1">
                                <label className="block text-xs font-medium text-gray-400 mb-2">Data inicial</label>
                                <DatePicker
                                  selectedDate={customDateRange.start}
                                  onChange={handleStartDateChange}
                                  maxDate={customDateRange.end || new Date()}
                                  placeholder="dd/mm/aaaa"
                                  className="w-full"
                                  forcePosition="above"
                                />
                              </div>
                              
                              <div className="flex-1">
                                <label className="block text-xs font-medium text-gray-400 mb-2">Data final</label>
                                <DatePicker
                                  selectedDate={customDateRange.end}
                                  onChange={handleEndDateChange}
                                  maxDate={new Date()}
                                  placeholder="dd/mm/aaaa"
                                  className="w-full"
                                  forcePosition="above"
                                />
                              </div>
                            </div>
                            
                            {/* Mensagem de erro de validação */}
                            {dateValidationError && (
                              <div className="mt-4 p-3 bg-red-600/10 border border-red-500/20 rounded-lg">
                                <p className="text-sm text-red-300 text-center">
                                  {dateValidationError}
                                </p>
                              </div>
                            )}
                            
                            {/* Exibição do período selecionado */}
                            {customDateRange.start && customDateRange.end && !dateValidationError && (
                              <div className="mt-4 p-3 bg-blue-600/10 border border-blue-500/20 rounded-lg">
                                <p className="text-sm text-blue-300 text-center">
                                  Período selecionado: {customDateRange.start.toLocaleDateString('pt-BR')} a {customDateRange.end.toLocaleDateString('pt-BR')}
                                </p>
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                )}

                {/* Botão de busca - só aparece quando há termos digitados */}
                {searchTerms.length > 0 && (
                    <div className="pt-4">
                            <button
                              onClick={handleSearch}
                    disabled={isSearching || searchTerms.length === 0}
                    className="w-full px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 disabled:opacity-50 disabled:cursor-not-allowed text-white rounded-xl font-semibold transition-all duration-200 flex items-center justify-center gap-3 text-base shadow-lg hover:shadow-xl disabled:shadow-none cursor-pointer"
                            >
                              {isSearching ? (
                                <>
                                  <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                                  Buscando...
                                </>
                              ) : (
                                <>
                                  <MagnifyingGlassIcon className="h-5 w-5" />
                                  Buscar nos Diários Oficiais
                                </>
                              )}
                            </button>
                    </div>
                  )}
                </div>
            </div>
          )}

          {/* Monitorar Tab */}
          {activeTab === 'monitorar' && (
          <div className="bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10 p-3 sm:p-4 md:p-6">
            <div className="space-y-6 fade-in">
              {/* Header */}
                <div>
                  <h3 className="text-base font-semibold text-white sm:text-lg">Monitoramentos</h3>
                <p className="text-sm text-gray-400 sm:text-base">Digite um termo que deseja monitorar diariamente nos diários oficiais</p>
                </div>

              {/* Campo de busca principal */}
              <div className="relative">
                <div className="input-with-icon relative">
                  <MagnifyingGlassIcon className="input-icon h-5 w-5 text-gray-400" />
                  <input
                    ref={monitorSearchInputRef}
                    type="text"
                    value={monitorSearchInput}
                    onChange={(e) => handleMonitorSearchInputChange(e.target.value)}
                    onFocus={() => {
                      setMonitorSearchInputFocused(true);
                      // Só abre o combobox se o input estiver vazio
                      if (!monitorSearchInput.trim()) {
                        setShowMonitorSearchHistory(true);
                      }
                    }}
                    onBlur={() => {
                      // Delay para permitir clique no dropdown
                      setTimeout(() => {
                        setMonitorSearchInputFocused(false);
                        // Só fecha o combobox se não há histórico ou se não está focado
                        if (monitorSearchHistory.length === 0) {
                          setShowMonitorSearchHistory(false);
                        }
                      }, 200);
                    }}
                    placeholder="ex.: João da Silva"
                    className="input-standard text-base w-full"
                  />
                  {monitorSearchInput && (
                    <button
                      onClick={() => {
                        setMonitorSearchInput('');
                        setMonitorSearchTerms([]);
                        setMonitorSelectedDiarios([]); // Clear selected diaries
                        setMonitorDiarioSearchTerm(''); // Clear diary search term
                        setSearchResults([]); // Clear results
                        setHasSearched(false); // Hide results card
                      }}
                      className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors cursor-pointer"
                    >
                      <XMarkIcon className="h-4 w-4" />
                    </button>
                  )}
                </div>

                {/* Badges de filtros ativos - todos alinhados horizontalmente */}
                {(monitorSearchTerms.length > 0 || monitorSelectedDiarios.length > 0) && (
                  <div className="flex flex-wrap gap-2 mt-3">
                    {/* Badges de termos digitados */}
                    {monitorSearchTerms.map((term, index) => (
                      <span
                        key={`term-${index}`}
                        className="inline-flex items-center gap-1 px-2 py-1 bg-blue-500/20 text-blue-200 rounded-full border border-blue-400/30 text-xs hover:bg-blue-500/30 transition-colors cursor-pointer"
                      >
                        <span>🔍</span>
                        {term}
                        <button
                          onClick={() => handleMonitorRemoveSearchTerm(index)}
                          className="ml-1 hover:text-blue-100 transition-colors"
                        >
                          <XMarkIcon className="h-3 w-3" />
                        </button>
                      </span>
                    ))}
                    
                    {/* Badges de diários selecionados */}
                    {monitorSelectedDiarios.map((diarioId) => {
                      const diario = diarios.find(d => d.id === diarioId);
                      return (
                        <span
                          key={`diario-${diarioId}`}
                          className="inline-flex items-center gap-1 px-2 py-1 bg-green-500/20 text-green-200 rounded-full border border-green-400/30 text-xs hover:bg-green-500/30 transition-colors cursor-pointer"
                        >
                          <span>📰</span>
                          {diario?.name}
                          <button
                            onClick={() => {
                              setMonitorSelectedDiarios(monitorSelectedDiarios.filter(id => id !== diarioId));
                            }}
                            className="ml-1 hover:text-green-100 transition-colors"
                          >
                            <XMarkIcon className="h-3 w-3" />
                          </button>
                        </span>
                      );
                    })}
                  </div>
                )}
                
                {/* Dropdown de histórico de pesquisas */}
                {showMonitorSearchHistory && monitorSearchHistory.length > 0 && monitorSearchInputFocused && createPortal(
                  <div 
                    className="fixed bg-gray-900/95 backdrop-blur-sm border border-gray-700/50 rounded-lg shadow-xl z-[10000] max-h-60 overflow-y-auto"
                    style={{
                      left: monitorSearchInputRef.current ? `${monitorSearchInputRef.current.getBoundingClientRect().left}px` : '50%',
                      top: monitorSearchInputRef.current ? `${monitorSearchInputRef.current.getBoundingClientRect().bottom + 8}px` : '200px',
                      width: monitorSearchInputRef.current ? `${monitorSearchInputRef.current.getBoundingClientRect().width}px` : '400px',
                      maxWidth: '90vw'
                    }}
                  >
                    <div className="p-2">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-xs text-gray-400 font-medium">Pesquisas recentes</span>
                        <button
                          onClick={clearMonitorSearchHistory}
                          className="text-xs text-gray-400 hover:text-white transition-colors cursor-pointer"
                        >
                          Limpar
                        </button>
                      </div>
                      {monitorSearchHistory.map((historyItem) => (
                        <div key={historyItem.id} className="flex items-center gap-2 px-3 py-2 text-sm text-gray-300 hover:bg-white/10 hover:text-white rounded-md group">
                          <button
                            onClick={() => selectFromMonitorHistory(historyItem)}
                            className="flex-1 text-left flex items-center gap-2 cursor-pointer"
                          >
                            <MagnifyingGlassIcon className="h-4 w-4 text-gray-400" />
                            <div className="flex flex-col">
                              <span className="font-medium">{historyItem.term}</span>
                              <span className="text-xs text-gray-400">
                                {historyItem.selectedDiarios.length > 0 
                                  ? `${historyItem.selectedDiarios.length} diário(s) • ${periodOptions.find(p => p.value === historyItem.searchPeriod)?.label || historyItem.searchPeriod}`
                                  : 'Sem diários selecionados'
                                }
                              </span>
                            </div>
                          </button>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              removeFromMonitorHistory(historyItem.id);
                            }}
                            className="opacity-0 group-hover:opacity-100 text-gray-500 hover:text-red-400 cursor-pointer"
                          >
                            <XMarkIcon className="h-4 w-4" />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>,
                  document.body
                )}
              </div>

              {/* Seleção de Diários - aparece quando há termos de busca */}
              {monitorSearchTerms.length > 0 && (
                <div id="monitor-diarios-section" className={`animate-in slide-in-from-bottom-2 duration-300 ${monitorHighlightDiarios ? 'ring-4 ring-blue-500/50 bg-blue-500/10' : ''}`}>
                  <label className="block text-sm font-medium text-gray-300 mb-4">
                    Selecione os diários oficiais
                  </label>
                  
                  {/* Dropdown com busca */}
                  <div className="bg-white/5 border border-white/20 rounded-xl p-4 sm:p-6 transition-all duration-500">
                    {/* Busca global */}
                    <div className="mb-6">
                      <div className="input-with-icon relative">
                        <MagnifyingGlassIcon className="input-icon h-5 w-5 text-gray-400" />
                        <input
                          type="text"
                          value={monitorDiarioSearchTerm}
                          onChange={(e) => setMonitorDiarioSearchTerm(e.target.value)}
                          placeholder="Buscar em todos os diários..."
                          className="w-full pl-10 pr-10 py-3 bg-gradient-to-r from-blue-500/5 to-green-500/5 border border-blue-400/20 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                        />
                        {monitorDiarioSearchTerm && (
                          <button
                            onClick={() => setMonitorDiarioSearchTerm('')}
                            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors cursor-pointer"
                          >
                            <XMarkIcon className="h-4 w-4" />
                          </button>
                        )}
                      </div>
                    </div>

                    {/* Lista de diários por poder */}
                    <div className="space-y-4 max-h-64 overflow-y-auto">
                      {Object.entries(filteredMonitorDiariosPorPoder).map(([poder, subcategorias]) => {
                        const totalDiarios = Array.isArray(subcategorias) 
                          ? subcategorias.length 
                          : Object.values(subcategorias as Record<string, any[]>).flat().length;
                        
                        return (
                          <div key={poder}>
                            <button
                              onClick={() => toggleMonitorPoder(poder, 'monitorar')}
                              className="flex items-center justify-between w-full text-left py-3 px-3 text-gray-300 hover:text-white font-medium bg-white/5 rounded-lg hover:bg-white/10 transition-all duration-200 cursor-pointer"
                            >
                              <span className="font-semibold text-sm">{poder} ({totalDiarios})</span>
                              <span className="transform transition-transform duration-200 text-blue-400">
                                {monitorExpandedPoderes[poder] ? '−' : '+'}
                              </span>
                            </button>
                            
                            {monitorExpandedPoderes[poder] && (
                              <div className="ml-4 space-y-3 mt-2">
                                {Array.isArray(subcategorias) ? (
                                  // Para MP e DP (arrays diretos)
                                  <div className="space-y-2">
                                    {subcategorias.map((diario) => (
                                      <label key={diario.id} className="flex items-center gap-3 py-2 px-3 text-sm text-gray-300 hover:text-white cursor-pointer rounded-lg hover:bg-white/5 transition-all duration-200">
                                        <input
                                          type="checkbox"
                                          checked={monitorSelectedDiarios.includes(diario.id)}
                                          onChange={() => handleMonitorDiarioSelect(diario.id)}
                                          className="w-4 h-4 border-2 border-gray-300 rounded-full focus:ring-2 focus:ring-blue-500 focus:ring-offset-0"
                                        />
                                        <span className="flex-1">{diario.name}</span>
                                      </label>
                                    ))}
                                  </div>
                                ) : (
                                  // Para poderes com subcategorias
                                  Object.entries(subcategorias as Record<string, any[]>).map(([subcategoria, diariosList]) => (
                                    <div key={subcategoria}>
                                      <button
                                        onClick={() => toggleMonitorSubcategoria(poder, subcategoria, 'monitorar')}
                                        className="flex items-center justify-between w-full text-left py-2 px-3 text-gray-300 hover:text-white font-medium bg-white/5 rounded-lg hover:bg-white/10 transition-all duration-200 cursor-pointer"
                                      >
                                        <span className="font-medium text-xs">{subcategoria} ({diariosList.length})</span>
                                        <span className="transform transition-transform duration-200 text-blue-400">
                                          {monitorExpandedSubcategorias[`${poder}-${subcategoria}`] ? '−' : '+'}
                                        </span>
                                      </button>
                                      
                                      {monitorExpandedSubcategorias[`${poder}-${subcategoria}`] && (
                                        <div className="ml-4 space-y-1 mt-2">
                                          {diariosList.map((diario: { id: string; name: string }) => (
                                            <label key={diario.id} className="flex items-center gap-3 py-2 px-3 text-sm text-gray-300 hover:text-white cursor-pointer rounded-lg hover:bg-white/5 transition-all duration-200">
                                              <input
                                                type="checkbox"
                                                checked={monitorSelectedDiarios.includes(diario.id)}
                                                onChange={() => handleMonitorDiarioSelect(diario.id)}
                                                className="w-4 h-4 border-2 border-gray-300 rounded-full focus:ring-2 focus:ring-blue-500 focus:ring-offset-0"
                                              />
                                              <span className="flex-1">{diario.name}</span>
                                            </label>
                                          ))}
                                        </div>
                                      )}
                                    </div>
                                  ))
                                )}
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>
              )}

              {/* Botão Criar alerta de monitoramento - aparece quando há termos digitados */}
              {monitorSearchTerms.length > 0 && (
                <div className="pt-4">
                  <button
                    onClick={handleCreateMonitoramentoFromSearch}
                    className="w-full px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 text-white rounded-xl font-semibold transition-all duration-200 flex items-center justify-center gap-3 text-base shadow-lg hover:shadow-xl cursor-pointer"
                  >
                    <MagnifyingGlassIcon className="h-5 w-5" />
                    Criar alerta de monitoramento
                  </button>
                </div>
              )}

              {/* Card de configuração de novo monitoramento */}
              {(showCreateForm || monitorTerm || monitorDiarios.length > 0 || monitorTermInput || editingMonitor !== null) && (
                <div className="bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10 p-3 sm:p-4 md:p-6 mb-6">
                  <div className="flex items-center gap-2 mb-4">
                    <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                    <h3 className="text-lg font-semibold text-white">
                    {editingMonitor !== null ? 'Editar monitoramento' : 'Criar monitoramento'}
                    </h3>
                  </div>
                  
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-white mb-2">
                        Termo
                      </label>
                      <div className="input-with-icon mb-2">
                        <MagnifyingGlassIcon className="input-icon h-4 w-4 text-gray-400" />
                        <input
                          type="text"
                          value={monitorTerm || ''}
                          onChange={(e) => setMonitorTerm(e.target.value)}
                          placeholder="Digite o termo que será monitorado"
                          className="input-standard text-base w-full"
                        />
                      </div>
                      {validationError && (
                        <p className="text-red-400 text-sm mt-2">{validationError}</p>
                      )}
                      
                      {/* Diários selecionados - badges */}
                      {monitorDiarios.length > 0 && (
                        <div className="flex flex-wrap gap-2 mt-3">
                          {monitorDiarios.map((diarioId) => {
                            const diario = diarios.find(d => d.id === diarioId);
                            return (
                              <span
                                key={diarioId}
                                className="inline-flex items-center gap-1 px-2 py-1 bg-green-500/20 text-green-200 rounded-full border border-green-400/30 text-xs hover:bg-green-500/30 transition-colors cursor-pointer"
                              >
                                <span>📰</span>
                                {diario?.name}
                                <button
                                  onClick={() => {
                                    setMonitorDiarios(monitorDiarios.filter(id => id !== diarioId));
                                  }}
                                  className="ml-1 hover:text-green-100 transition-colors"
                                >
                                  <XMarkIcon className="h-3 w-3" />
                                </button>
                              </span>
                            );
                          })}
                        </div>
                      )}
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-300 mb-4">
                        Selecione os diários oficiais
                      </label>
                      <div className="bg-white/5 border border-white/20 rounded-xl p-4 sm:p-6">
                        {/* Busca global */}
                        <div className="mb-6">
                          <div className="input-with-icon relative">
                            <MagnifyingGlassIcon className="input-icon h-5 w-5 text-gray-400" />
                            <input
                              type="text"
                              value={monitorDiarioSearchTerm}
                              onChange={(e) => setMonitorDiarioSearchTerm(e.target.value)}
                              placeholder="Buscar em todos os diários..."
                              className="w-full pl-10 pr-10 py-3 bg-gradient-to-r from-blue-500/5 to-green-500/5 border border-blue-400/20 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                            />
                            {monitorDiarioSearchTerm && (
                              <button
                                onClick={() => setMonitorDiarioSearchTerm('')}
                                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors cursor-pointer"
                              >
                                <XMarkIcon className="h-4 w-4" />
                              </button>
                            )}
                          </div>
                        </div>

                        {/* Lista de diários por poder */}
                        <div className="space-y-4 max-h-64 overflow-y-auto">
                          {Object.entries(filteredMonitorDiariosPorPoder).map(([poder, subcategorias]) => {
                            const totalDiarios = Array.isArray(subcategorias) 
                              ? subcategorias.length 
                              : Object.values(subcategorias as Record<string, any[]>).flat().length;
                            
                            return (
                              <div key={poder} className="space-y-2">
                                <button
                                  onClick={() => togglePoder(poder, 'monitorar')}
                                  className="flex items-center justify-between w-full text-left py-2 px-2 text-gray-300 hover:text-white font-medium bg-white/5 rounded-lg hover:bg-white/10 transition-all duration-200 cursor-pointer"
                                >
                                  <span className="text-sm">{poder} ({totalDiarios})</span>
                                  <span className="transform transition-transform duration-200 text-blue-400">
                                    {monitorExpandedPoderes[poder] ? '−' : '+'}
                                  </span>
                                </button>
                                
                                {monitorExpandedPoderes[poder] && (
                                  <div className="ml-4 space-y-2">
                                    {Array.isArray(subcategorias) ? (
                                      subcategorias.map((diario) => (
                                        <label key={diario.id} className="flex items-center space-x-3 py-2 px-2 rounded-lg hover:bg-white/5 cursor-pointer">
                                            <input
                                              type="checkbox"
                                              checked={monitorDiarios.includes(diario.id)}
                                              onChange={(e) => {
                                                if (e.target.checked) {
                                                  setMonitorDiarios([...monitorDiarios, diario.id]);
                                                } else {
                                                  setMonitorDiarios(monitorDiarios.filter(id => id !== diario.id));
                                                }
                                              }}
                                            className="h-4 w-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500 focus:ring-2"
                                            />
                                          <span className="text-sm text-gray-300">{diario.name}</span>
                                          </label>
                                      ))
                                    ) : (
                                      Object.entries(subcategorias as Record<string, any[]>).map(([subcategoria, diarios]) => (
                                        <div key={subcategoria} className="space-y-2">
                                          <button
                                            onClick={() => toggleSubcategoria(poder, subcategoria, 'monitorar')}
                                            className="flex items-center justify-between w-full text-left py-1 px-2 text-gray-400 hover:text-gray-200 text-sm bg-white/3 rounded cursor-pointer"
                                          >
                                            <span>{subcategoria} ({diarios.length})</span>
                                            <span className="transform transition-transform duration-200 text-blue-400">
                                              {monitorExpandedSubcategorias[`${poder}-${subcategoria}`] ? '−' : '+'}
                                            </span>
                                          </button>
                                          
                                          {monitorExpandedSubcategorias[`${poder}-${subcategoria}`] && (
                                            <div className="ml-4 space-y-1">
                                              {diarios.map((diario) => (
                                                <label key={diario.id} className="flex items-center space-x-3 py-1 px-2 rounded hover:bg-white/5 cursor-pointer">
                                                  <input
                                                    type="checkbox"
                                                    checked={monitorDiarios.includes(diario.id)}
                                                    onChange={(e) => {
                                                      if (e.target.checked) {
                                                        setMonitorDiarios([...monitorDiarios, diario.id]);
                                                      } else {
                                                        setMonitorDiarios(monitorDiarios.filter(id => id !== diario.id));
                                                      }
                                                    }}
                                                    className="h-3 w-3 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500 focus:ring-1"
                                                  />
                                                  <span className="text-xs text-gray-400">{diario.name}</span>
                                                </label>
                                              ))}
                                            </div>
                                          )}
                                        </div>
                                      ))
                                    )}
                                  </div>
                                )}
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex gap-3">
                      {editingMonitor !== null ? (
                        <>
                          <button
                            onClick={handleSaveEditMonitoramento}
                            className="flex-1 px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 text-white rounded-lg font-medium transition-all duration-200 shadow-lg hover:shadow-xl cursor-pointer"
                          >
                            Salvar alterações
                          </button>
                          <button
                            onClick={handleCancelEdit}
                            className="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg font-medium transition-colors cursor-pointer"
                          >
                            Cancelar
                          </button>
                        </>
                      ) : (
                        <div className="flex gap-3">
                          <button
                            onClick={handleCreateMonitoramento}
                            className="flex-1 px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 text-white rounded-lg font-medium transition-all duration-200 shadow-lg hover:shadow-xl cursor-pointer"
                          >
                            Criar monitoramento
                          </button>
                          <button
                            onClick={handleCancelEdit}
                            className="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg font-medium transition-colors cursor-pointer"
                          >
                            Cancelar
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              )}


            </div>
          </div>
        )}

        {/* Card de monitoramentos ativos - FORA do card principal */}
        {activeTab === 'monitorar' && monitoramentos.length > 0 && (
          <div className="bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10 p-3 sm:p-4 md:p-6 mt-6">
            <div className="flex items-center gap-2 mb-4">
              <div className="w-2 h-2 bg-green-400 rounded-full"></div>
              <h3 className="text-lg font-semibold text-white">Monitoramentos Ativos</h3>
              <span className="px-2 py-1 bg-green-500/20 text-green-300 rounded-full text-xs font-medium">
                {monitoramentos.length}
              </span>
            </div>
            
              <div className="space-y-4">
              {monitoramentos.map((monitoramento) => {
                    const diariosNames = monitoramento.diarios.map(id => {
                      const diario = diarios.find(d => d.id === id);
                      return diario ? diario.name : id;
                    });
                    
                    return (
                      <div
                        key={monitoramento.id}
                        className="bg-white/5 border border-white/10 rounded-lg p-4 sm:p-6 hover:bg-white/10 transition-colors cursor-pointer"
                        onClick={() => {
                          setSelectedMonitor(monitoramento);
                          openMonitorDrawer();
                        }}
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <div className="flex items-center gap-3 mb-3">
                              <h4 className="text-sm font-semibold text-white sm:text-base">
                                {monitoramento.terms[0]}
                              </h4>
                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                monitoramento.isActive 
                                  ? 'bg-green-600/20 text-green-300 border border-green-500/30' 
                                  : 'bg-red-600/20 text-red-300 border border-red-500/30'
                              }`}>
                                {monitoramento.isActive ? 'Ativo' : 'Pausado'}
                              </span>
                              <span className="px-2 py-1 rounded-full text-xs font-medium bg-blue-600/20 text-blue-300 border border-blue-500/30">
                                Diária
                              </span>
                            </div>
                            <p className="text-gray-400 text-sm mb-2">
                              <span className="font-medium">Diários:</span> {diariosNames.join(', ')}
                            </p>
                            <p className="text-gray-400 text-xs">
                              Ocorrências: {monitoramento.occurrences} | Criado em: {new Date(monitoramento.createdAt).toLocaleDateString('pt-BR')}
                            </p>
                          </div>
                          <div className="flex items-center gap-2">
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                setSelectedMonitor(monitoramento);
                                openMonitorDrawer();
                              }}
                              className="p-2 text-gray-400 hover:text-cyan-400 hover:bg-cyan-600/10 rounded-lg transition-colors cursor-pointer"
                              title="Ver histórico"
                            >
                              <EyeIcon className="h-4 w-4" />
                            </button>
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                // Usar novo sistema da sub-aba Monitorar Termos
                                const monitor = monitoramentos.find(m => m.id === monitoramento.id);
                                if (monitor) {
                                  setMonitorSearchInput(monitor.terms.join(" \));
 setMonitorSearchTerms([...monitor.terms]);
 setMonitorSelectedDiarios([...monitor.diarios]);
 
 // Expandir categorias relevantes
 const expandedPoderes = {};
 const expandedSubcategorias = {};
 
 monitor.diarios.forEach(diarioId => {
 const diario = diarios.find(d => d.id === diarioId);
 if (diario) {
 Object.entries(diariosPorPoder).forEach(([poder, subcategorias]) => {
 if (Array.isArray(subcategorias)) {
 if (subcategorias.some(d => d.id === diarioId)) {
 expandedPoderes[poder] = true;
 }
 } else {
 Object.entries(subcategorias).forEach(([subcategoria, diariosList]) => {
 if (diariosList.some(d => d.id === diarioId)) {
 expandedPoderes[poder] = true;
 expandedSubcategorias[${poder}-] = true;
 }
 });
 }
 });
 }
 });
 
 setMonitorExpandedPoderes(prev => ({ ...prev, ...expandedPoderes }));
 setMonitorExpandedSubcategorias(prev => ({ ...prev, ...expandedSubcategorias }));
 setEditingMonitor(monitoramento.id);
 }
                              }}
                              className="p-2 text-gray-400 hover:text-blue-400 hover:bg-blue-600/10 rounded-lg transition-colors cursor-pointer"
                              title="Editar"
                            >
                              <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                              </svg>
                            </button>
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                handleToggleMonitoramento(monitoramento.id);
                              }}
                              className="p-2 text-gray-400 hover:text-yellow-400 hover:bg-yellow-600/10 rounded-lg transition-colors cursor-pointer"
                              title={monitoramento.isActive ? 'Pausar' : 'Ativar'}
                            >
                              {monitoramento.isActive ? (
                                <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                              ) : (
                                <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                              )}
                            </button>
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                handleDeleteMonitoramento(monitoramento.id);
                              }}
                              className="p-2 text-gray-400 hover:text-red-400 hover:bg-red-600/10 rounded-lg transition-colors cursor-pointer"
                              title="Excluir"
                            >
                              <TrashIcon className="h-4 w-4" />
                            </button>
                          </div>
                        </div>
                      </div>
                    );
              })}
            </div>
          </div>
        )}

        {/* Estado vazio - quando não há monitoramentos */}
        {activeTab === 'monitorar' && monitoramentos.length === 0 && (
          <div className="bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10 p-3 sm:p-4 md:p-6 mt-6">
                  <div className="text-center py-8 sm:py-12">
                    <BellIcon className="h-10 w-10 text-gray-400 mx-auto mb-3 sm:mb-4" />
                    <h4 className="text-sm font-semibold text-white mb-2 sm:text-base">Nenhum monitoramento ativo</h4>
                    <p className="text-sm text-gray-400 mb-4">Crie alertas para acompanhar termos específicos nos diários oficiais.</p>
                    <button 
                      onClick={() => {
                        setShowCreateForm(true);
                        setMonitorTermInput('');
                        setValidationError('');
                        setEditingMonitor(null);
                        setMonitorTerm('');
                        setHasClickedCreateMonitor(true);
                      }}
                className="px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 text-white rounded-lg text-sm font-medium transition-all duration-200 shadow-lg hover:shadow-xl cursor-pointer"
                    >
                      Criar Monitoramento
                    </button>
                    <p className="text-xs text-gray-500 mt-3">
                      💡 Você pode pausar ou editar o alerta quando quiser
                    </p>
              </div>
            </div>
          )}

          {/* Navegar Tab */}
          {activeTab === 'navegar' && (
          <div className="bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10 p-3 sm:p-4 md:p-6">
            <div className="space-y-4 sm:space-y-6 fade-in">
              {/* Header com botão fixo */}
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-base font-semibold text-white sm:text-lg">Navegar Diários</h3>
                  <p className="text-sm text-gray-400 sm:text-base">Visualize e baixe edições oficiais</p>
                </div>
              </div>

              {/* Toolbar melhorada */}
              <div className="bg-white/5 border border-white/10 rounded-lg p-3 sm:p-4">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-4">
                      Selecione o diário oficial
                    </label>
                    
                    {/* Dropdown com busca */}
                    <div className="bg-white/5 border border-white/20 rounded-xl p-4 sm:p-6">
                      {/* Busca global */}
                      <div className="mb-6">
                        <div className="input-with-icon relative">
                          <MagnifyingGlassIcon className="input-icon h-5 w-5 text-gray-400" />
                          <input
                            type="text"
                            value={navegarDiarioSearchTerm}
                            onChange={(e) => setNavegarDiarioSearchTerm(e.target.value)}
                            placeholder="Buscar em todos os diários..."
                            className="w-full pl-10 pr-10 py-3 bg-gradient-to-r from-blue-500/5 to-green-500/5 border border-blue-400/20 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                          />
                          {navegarDiarioSearchTerm && (
                            <button
                              onClick={() => setNavegarDiarioSearchTerm('')}
                              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors cursor-pointer"
                            >
                              <XMarkIcon className="h-4 w-4" />
                            </button>
                          )}
                        </div>
                      </div>

                      {/* Lista de diários por poder */}
                      <div className="space-y-4 max-h-64 overflow-y-auto">
                        {Object.entries(filteredNavegarDiariosPorPoder).map(([poder, subcategorias]) => {
                          const totalDiarios = Array.isArray(subcategorias) 
                            ? subcategorias.length 
                            : Object.values(subcategorias as Record<string, any[]>).flat().length;
                          
                          return (
                            <div key={poder}>
                              <button
                                onClick={() => togglePoder(poder, 'navegar')}
                                className="flex items-center justify-between w-full text-left py-3 px-3 text-gray-300 hover:text-white font-medium bg-white/5 rounded-lg hover:bg-white/10 transition-all duration-200 cursor-pointer"
                              >
                                <span className="font-semibold text-sm">{poder} ({totalDiarios})</span>
                                <span className="transform transition-transform duration-200 text-blue-400">
                                  {navegarExpandedPoderes[poder] ? '−' : '+'}
                                </span>
                              </button>
                              
                              {navegarExpandedPoderes[poder] && (
                                <div className="ml-4 space-y-3 mt-2">
                                  {Array.isArray(subcategorias) ? (
                                    // Para MP e DP (arrays diretos)
                                    <div className="space-y-2">
                                      {subcategorias.map((diario) => (
                                        <label key={diario.id} className="flex items-center gap-3 py-2 px-3 text-sm text-gray-300 hover:text-white cursor-pointer rounded-lg hover:bg-white/5 transition-all duration-200">
                                          <input
                                            type="radio"
                                            name="navegar-diario"
                                            value={diario.id}
                                            checked={selectedDiario === diario.id}
                                            onChange={(e) => setSelectedDiario(e.target.value)}
                                            className="w-4 h-4 border-2 border-gray-300 rounded-full focus:ring-2 focus:ring-blue-500 focus:ring-offset-0"
                                          />
                                          <span className="flex-1">{diario.name}</span>
                                        </label>
                                      ))}
                                    </div>
                                  ) : (
                                    // Para poderes com subcategorias
                                    Object.entries(subcategorias as Record<string, any[]>).map(([subcategoria, diariosList]) => (
                                      <div key={subcategoria}>
                                        <button
                                          onClick={() => toggleSubcategoria(poder, subcategoria, 'navegar')}
                                          className="flex items-center justify-between w-full text-left py-2 px-3 text-gray-300 hover:text-white font-medium bg-white/5 rounded-lg hover:bg-white/10 transition-all duration-200"
                                        >
                                          <span className="font-medium text-xs">{subcategoria} ({diariosList.length})</span>
                                          <span className="transform transition-transform duration-200 text-blue-400">
                                            {navegarExpandedSubcategorias[`${poder}-${subcategoria}`] ? '−' : '+'}
                                          </span>
                                        </button>
                                        
                                        {navegarExpandedSubcategorias[`${poder}-${subcategoria}`] && (
                                          <div className="ml-4 space-y-1 mt-2">
                                            {diariosList.map((diario: { id: string; name: string }) => (
                                              <label key={diario.id} className="flex items-center gap-3 py-2 px-3 text-sm text-gray-300 hover:text-white cursor-pointer rounded-lg hover:bg-white/5 transition-all duration-200">
                                                <input
                                                  type="radio"
                                                  name="navegar-diario"
                                                  value={diario.id}
                                                  checked={selectedDiario === diario.id}
                                                  onChange={(e) => setSelectedDiario(e.target.value)}
                                                  className=""
                                                />
                                                <span className="flex-1">{diario.name}</span>
                                              </label>
                                            ))}
                                          </div>
                                        )}
                                      </div>
                                    ))
                                  )}
                                </div>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    </div>
                    
                    {/* Botão de limpar seleção */}
                    {selectedDiario && (
                      <div className="mt-6 flex justify-end">
                        <button
                          onClick={() => setSelectedDiario('')}
                          className="px-3 py-2 bg-gray-600/20 hover:bg-gray-600/30 border border-gray-500/30 hover:border-gray-500/50 text-gray-300 hover:text-gray-200 rounded-lg text-xs font-medium transition-all duration-200 flex items-center gap-2 hover:scale-105"
                        >
                          <svg className="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                          Limpar seleção
                        </button>
                      </div>
                    )}
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-4">
                      Data específica (opcional)
                    </label>
                    
                    <div className="bg-white/5 border border-white/20 rounded-xl p-4 sm:p-6">
                      <DatePicker
                        selectedDate={selectedDate ? new Date(selectedDate) : null}
                        onChange={(date) => setSelectedDate(date ? date.toISOString().split('T')[0] : '')}
                        maxDate={new Date()}
                        placeholder="dd/mm/aaaa"
                        className="w-full"
                      />
                    </div>
                  </div>
                </div>
              </div>

              {/* Lista de edições */}
              <div className="space-y-3 sm:space-y-4">
                {selectedDiario ? (
                  <div className="space-y-3 sm:space-y-4">
                    <h4 className="text-sm font-semibold text-white sm:text-base">
                      Edições disponíveis - {diarios.find(d => d.id === selectedDiario)?.name}
                    </h4>
                    
                    {/* Verificar se o diário tem múltiplas seções */}
                    {hasMultipleSections(selectedDiario) ? (
                      <div className="space-y-4">
                        {/* Edição de hoje com múltiplas seções */}
                        <div className="bg-white/5 border border-white/10 rounded-lg p-3 sm:p-4">
                          <div className="flex items-center justify-between mb-4">
                            <div className="flex-1">
                              <h5 className="text-sm font-semibold text-white sm:text-base">
                                Edição {String(new Date().getDate()).padStart(2, '0')}/{String(new Date().getMonth() + 1).padStart(2, '0')}/{new Date().getFullYear()}
                              </h5>
                              <p className="text-xs text-gray-400 sm:text-sm">
                                DOU com 5 seções • 312 páginas total
                              </p>
                            </div>
                            <div className="flex gap-2">
                              <button 
                                onClick={() => toggleSections('dou-today')}
                                className="expand-button px-3 py-1.5 bg-gray-600/20 text-gray-300 hover:bg-gray-600/30 rounded-lg text-xs font-medium flex items-center gap-1.5"
                              >
                                <span className="transform transition-transform duration-200">
                                  {expandedSections['dou-today'] ? '−' : '+'}
                                </span>
                                {expandedSections['dou-today'] ? 'Ocultar seções' : 'Ver seções'}
                              </button>
                              {/* Botão "Baixar PDF" removido para diários com múltiplas seções */}
                              <div className="px-3 py-1.5 bg-amber-600/20 text-amber-300 rounded-lg text-xs font-medium flex items-center gap-1.5">
                                <span>ℹ️</span>
                                Expanda as seções para baixar
                              </div>
                            </div>
                          </div>
                          
                          {/* Seções do DOU - Mostrar apenas quando expandido */}
                          {expandedSections['dou-today'] && (
                            <div className={`grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 ${sectionAnimations['dou-today'] || ''}`}>
                            <div className="bg-white/5 border border-white/10 rounded-lg p-3 hover:bg-white/10 transition-colors">
                              <div className="flex items-center justify-between mb-2">
                                <h6 className="text-xs font-semibold text-blue-300">1ª Seção</h6>
                                <span className="text-xs text-gray-400">89 páginas</span>
                              </div>
                              <p className="text-xs text-gray-400 mb-3">
                                Atos do Poder Executivo, Leis, Decretos, Portarias, etc.
                              </p>
                              <div className="flex gap-1">
                                <button className="px-2 py-1 bg-blue-600/20 text-blue-300 hover:bg-blue-600/30 rounded text-xs font-medium transition-colors flex items-center gap-1">
                                  <EyeIcon className="h-2.5 w-2.5" />
                                  Ver
                                </button>
                                <button className="px-2 py-1 bg-green-600/20 text-green-300 hover:bg-green-600/30 rounded text-xs font-medium transition-colors flex items-center gap-1 cursor-pointer">
                                  <ArrowDownTrayIcon className="h-2.5 w-2.5" />
                                  PDF
                                </button>
                              </div>
                            </div>
                            
                            <div className="bg-white/5 border border-white/10 rounded-lg p-3 hover:bg-white/10 transition-colors">
                              <div className="flex items-center justify-between mb-2">
                                <h6 className="text-xs font-semibold text-green-300">2ª Seção</h6>
                                <span className="text-xs text-gray-400">78 páginas</span>
                              </div>
                              <p className="text-xs text-gray-400 mb-3">
                                Atos do Poder Judiciário, Tribunais, Ministério Público, etc.
                              </p>
                              <div className="flex gap-1">
                                <button className="px-2 py-1 bg-blue-600/20 text-blue-300 hover:bg-blue-600/30 rounded text-xs font-medium transition-colors flex items-center gap-1">
                                  <EyeIcon className="h-2.5 w-2.5" />
                                  Ver
                                </button>
                                <button className="px-2 py-1 bg-green-600/20 text-green-300 hover:bg-green-600/30 rounded text-xs font-medium transition-colors flex items-center gap-1 cursor-pointer">
                                  <ArrowDownTrayIcon className="h-2.5 w-2.5" />
                                  PDF
                                </button>
                              </div>
                            </div>
                            
                            <div className="bg-white/5 border border-white/10 rounded-lg p-3 hover:bg-white/10 transition-colors">
                              <div className="flex items-center justify-between mb-2">
                                <h6 className="text-xs font-semibold text-purple-300">3ª Seção</h6>
                                <span className="text-xs text-gray-400">80 páginas</span>
                              </div>
                              <p className="text-xs text-gray-400 mb-3">
                                Atos do Poder Legislativo, Contratos, Licitações, etc.
                              </p>
                              <div className="flex gap-1">
                                <button className="px-2 py-1 bg-blue-600/20 text-blue-300 hover:bg-blue-600/30 rounded text-xs font-medium transition-colors flex items-center gap-1">
                                  <EyeIcon className="h-2.5 w-2.5" />
                                  Ver
                                </button>
                                <button className="px-2 py-1 bg-green-600/20 text-green-300 hover:bg-green-600/30 rounded text-xs font-medium transition-colors flex items-center gap-1 cursor-pointer">
                                  <ArrowDownTrayIcon className="h-2.5 w-2.5" />
                                  PDF
                                </button>
                              </div>
                            </div>
                            
                            {/* Seção Extra A */}
                            <div className="bg-white/5 border border-orange-500/30 rounded-lg p-3 hover:bg-white/10 transition-colors">
                              <div className="flex items-center justify-between mb-2">
                                <h6 className="text-xs font-semibold text-orange-300">2ª Seção - Extra A</h6>
                                <span className="text-xs text-gray-400">32 páginas</span>
                              </div>
                              <p className="text-xs text-gray-400 mb-3">
                                Atos do Poder Judiciário - Edição Extra, Urgências, etc.
                              </p>
                              <div className="flex gap-1">
                                <button className="px-2 py-1 bg-blue-600/20 text-blue-300 hover:bg-blue-600/30 rounded text-xs font-medium transition-colors flex items-center gap-1">
                                  <EyeIcon className="h-2.5 w-2.5" />
                                  Ver
                                </button>
                                <button className="px-2 py-1 bg-green-600/20 text-green-300 hover:bg-green-600/30 rounded text-xs font-medium transition-colors flex items-center gap-1 cursor-pointer">
                                  <ArrowDownTrayIcon className="h-2.5 w-2.5" />
                                  PDF
                                </button>
                              </div>
                            </div>
                            
                            {/* Seção Extra B */}
                            <div className="bg-white/5 border border-cyan-500/30 rounded-lg p-3 hover:bg-white/10 transition-colors">
                              <div className="flex items-center justify-between mb-2">
                                <h6 className="text-xs font-semibold text-cyan-300">3ª Seção - Extra A</h6>
                                <span className="text-xs text-gray-400">33 páginas</span>
                              </div>
                              <p className="text-xs text-gray-400 mb-3">
                                Atos do Poder Legislativo - Edição Extra, Contratos Urgentes, etc.
                              </p>
                              <div className="flex gap-1">
                                <button className="px-2 py-1 bg-blue-600/20 text-blue-300 hover:bg-blue-600/30 rounded text-xs font-medium transition-colors flex items-center gap-1">
                                  <EyeIcon className="h-2.5 w-2.5" />
                                  Ver
                                </button>
                                <button className="px-2 py-1 bg-green-600/20 text-green-300 hover:bg-green-600/30 rounded text-xs font-medium transition-colors flex items-center gap-1 cursor-pointer">
                                  <ArrowDownTrayIcon className="h-2.5 w-2.5" />
                                  PDF
                                </button>
                              </div>
                            </div>
                            </div>
                          )}
                        </div>
                        
                        {/* Edições anteriores normais */}
                        {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((_, index) => (
                          <div
                            key={index}
                            className="bg-white/5 border border-white/10 rounded-lg p-2 sm:p-3 hover:bg-white/10 transition-colors"
                          >
                            <div className="flex items-center justify-between">
                              <div>
                                <h5 className="text-sm font-semibold text-white sm:text-base">
                                  Edição {String(new Date().getDate() - index - 1).padStart(2, '0')}/{String(new Date().getMonth() + 1).padStart(2, '0')}/{new Date().getFullYear()}
                                </h5>
                                <p className="text-xs text-gray-400 sm:text-sm">
                                  N/A páginas
                                </p>
                              </div>
                              <div className="flex gap-2">
                                {/* Botão "Baixar PDF" removido para diários com múltiplas seções */}
                                <div className="px-3 py-1.5 bg-amber-600/20 text-amber-300 rounded-lg text-xs font-medium flex items-center gap-1.5">
                                  <span>ℹ️</span>
                                  Expanda as seções para baixar
                                </div>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      /* Edições normais para outros diários (sem múltiplas seções) */
                      [1, 2, 3, 4, 5].map((_, index) => (
                        <div
                          key={index}
                          className="bg-white/5 border border-white/10 rounded-lg p-2 sm:p-3 hover:bg-white/10 transition-colors"
                        >
                          <div className="flex items-center justify-between">
                            <div>
                              <h5 className="text-sm font-semibold text-white sm:text-base">
                                Edição {String(new Date().getDate() - index).padStart(2, '0')}/{String(new Date().getMonth() + 1).padStart(2, '0')}/{new Date().getFullYear()}
                              </h5>
                              <p className="text-xs text-gray-400 sm:text-sm">
                                N/A páginas
                              </p>
                            </div>
                            <div className="flex gap-2">
                              <button className="px-3 py-1.5 bg-blue-600/20 text-blue-300 hover:bg-blue-600/30 rounded-lg text-xs font-medium transition-colors flex items-center gap-1.5 cursor-pointer">
                                <EyeIcon className="h-3 w-3" />
                                Visualizar
                              </button>
                              <button className="px-3 py-1.5 bg-green-600/20 text-green-300 hover:bg-green-600/30 rounded-lg text-xs font-medium transition-colors flex items-center gap-1.5">
                                <ArrowDownTrayIcon className="h-3 w-3" />
                                Baixar PDF
                              </button>
                            </div>
                          </div>
                        </div>
                      ))
                    )}
                  </div>
                ) : (
                  <div className="text-center py-8 sm:py-12">
                    <DocumentTextIcon className="h-10 w-10 text-gray-400 mx-auto mb-3 sm:mb-4" />
                    <h4 className="text-sm font-semibold text-white mb-2 sm:text-base">Selecione um diário oficial</h4>
                    <p className="text-xs text-gray-500 sm:text-sm">
                      Escolha um diário oficial acima para visualizar as edições disponíveis.
                    </p>
                  </div>
                )}
              </div>
              </div>
            </div>
          )}
      </div>

      {/* Seção de Resultados Separada - Fora do container principal */}
      {activeTab === 'buscar' && searchResults.length > 0 && (
        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 pb-16 sm:pb-20 md:pb-24 -mt-8" data-results-card>
          <div className="bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10 p-3 sm:p-4 md:p-6 ">
            <div className="flex items-center justify-between mb-4 sm:mb-6">
              <h3 className="text-base font-semibold text-white sm:text-lg">
                Resultados ({searchResults.length})
              </h3>
              <button
                onClick={() => {
                  setSearchInput('');
                  setSearchTerms([]);
                  setSelectedDiarios([]);
                  setSearchResults([]);
                  setShowDiarioDropdown(false);
                  setShowDateFilters(false);
                  setShowCustomDateRange(false);
                  setHasSearched(false);
                  // Scroll para o topo da página
                  window.scrollTo({ top: 0, behavior: 'smooth' });
                  // Focar no campo de busca
                  setTimeout(() => {
                    const searchInput = document.querySelector('input[placeholder="ex.: João da Silva"]') as HTMLInputElement;
                    if (searchInput) {
                      searchInput.focus();
                    }
                  }, 300);
                }}
                className="px-3 py-1.5 bg-white/10 hover:bg-white/20 text-white rounded-lg text-sm font-medium transition-colors cursor-pointer"
              >
                Nova busca
              </button>
            </div>
            
            <div className="grid grid-cols-1 gap-4 sm:gap-6">
              {searchResults.flatMap((result) => {
                // Se o resultado tem seções, criar um resultado individual para cada seção
                if (result.sections && result.sections.length > 0) {
                  return result.sections.map((section) => (
                    <div
                      key={`${result.id}-${section.id}`}
                      className="bg-white/5 border border-white/10 rounded-xl p-3 sm:p-4 hover:bg-white/10 transition-all duration-200 hover:shadow-lg"
                    >
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex-1">
                          <h4 className="text-lg font-semibold text-white mb-2 line-clamp-2">
                            {result.title}
                          </h4>
                          <div className="flex items-center gap-3 text-sm text-gray-400 mb-3">
                            <span className="bg-blue-600/20 text-blue-300 px-2 py-1 rounded text-xs">
                              {result.source} - {section.name}
                            </span>
                            <span>{result.date}</span>
                          </div>
                        </div>
                      </div>
                      <p className="text-gray-300 text-sm mb-4 line-clamp-3">
                        {result.excerpt}
                      </p>
                      <div className="flex items-center justify-between">
                        <div className="flex gap-2">
                          <button className="px-4 py-2 bg-white/10 text-white hover:bg-white/20 rounded-lg text-sm font-medium transition-colors flex items-center gap-2 cursor-pointer">
                            <ArrowDownTrayIcon className="h-4 w-4" />
                            PDF
                          </button>
                        </div>
                        <button
                          onClick={() => handleSaveAsMonitor(result.title)}
                          className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors flex items-center gap-2 cursor-pointer ${
                            monitoredTerms.has(result.title)
                              ? 'bg-green-600/30 text-green-200'
                              : 'bg-green-600/20 text-green-300 hover:bg-green-600/30'
                          }`}
                        >
                          {monitoredTerms.has(result.title) ? (
                            <CheckIcon className="h-4 w-4" />
                          ) : (
                            <BellIcon className="h-4 w-4" />
                          )}
                          {monitoredTerms.has(result.title) && (
                            <span className="text-xs">Termo monitorado</span>
                          )}
                        </button>
                      </div>
                    </div>
                  ));
                } else {
                  // Se não tem seções, renderizar como antes
                  return (
                    <div
                      key={result.id}
                      className="bg-white/5 border border-white/10 rounded-xl p-3 sm:p-4 hover:bg-white/10 transition-all duration-200 hover:shadow-lg"
                    >
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex-1">
                          <h4 className="text-lg font-semibold text-white mb-2 line-clamp-2">
                            {result.title}
                          </h4>
                          <div className="flex items-center gap-3 text-sm text-gray-400 mb-3">
                            <span className="bg-blue-600/20 text-blue-300 px-2 py-1 rounded text-xs">
                              {result.source}
                            </span>
                            <span>{result.date}</span>
                          </div>
                        </div>
                      </div>
                      <p className="text-gray-300 text-sm mb-4 line-clamp-3">
                        {result.excerpt}
                      </p>
                      <div className="flex items-center justify-between">
                        <div className="flex gap-2">
                          <button className="px-4 py-2 bg-white/10 text-white hover:bg-white/20 rounded-lg text-sm font-medium transition-colors flex items-center gap-2 cursor-pointer">
                            <ArrowDownTrayIcon className="h-4 w-4" />
                            PDF
                          </button>
                        </div>
                        <button
                          onClick={() => handleSaveAsMonitor(result.title)}
                          className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors flex items-center gap-2 cursor-pointer ${
                            monitoredTerms.has(result.title)
                              ? 'bg-green-600/30 text-green-200'
                              : 'bg-green-600/20 text-green-300 hover:bg-green-600/30'
                          }`}
                        >
                          {monitoredTerms.has(result.title) ? (
                            <CheckIcon className="h-4 w-4" />
                          ) : (
                            <BellIcon className="h-4 w-4" />
                          )}
                          {monitoredTerms.has(result.title) && (
                            <span className="text-xs">Termo monitorado</span>
                          )}
                        </button>
                      </div>
                    </div>
                  );
                }
              })}
            </div>
          </div>
        </div>
      )}

      {/* Empty state separado - Fora do container principal */}
      {activeTab === 'buscar' && searchResults.length === 0 && !isSearching && hasSearched && (
        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 pb-16 sm:pb-20 md:pb-24 -mt-4">
          <div className="bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10 p-3 sm:p-4 md:p-6 ">
            <div className="text-center py-8 sm:py-12">
              <DocumentTextIcon className="h-10 w-10 text-gray-400 mx-auto mb-3 sm:mb-4" />
              <h3 className="text-sm font-semibold text-white mb-2 sm:text-base">Nenhum resultado encontrado</h3>
              <p className="text-sm text-gray-400">
                Tente ampliar o período de busca, incluir mais diários ou usar termos diferentes.
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Drawer de Preview */}
      {showDrawer && (
        <div className="fixed inset-0 z-50 overflow-hidden">
          <div 
            className={`absolute inset-0 bg-black/50 backdrop-blur-sm ${drawerAnimation === 'slide-in' ? 'drawer-overlay-fade-in' : drawerAnimation === 'slide-out' ? 'drawer-overlay-fade-out' : ''}`}
            onClick={closeDrawer} 
          />
          <div className={`absolute right-0 top-0 h-full w-full max-w-4xl bg-slate-900 border-l border-white/10 shadow-2xl ${drawerAnimation === 'slide-in' ? 'drawer-slide-in-right' : drawerAnimation === 'slide-out' ? 'drawer-slide-out-right' : ''}`}>
            <div className="flex items-center justify-between p-4 sm:p-6 border-b border-white/10">
              <h3 className="text-lg font-semibold text-white">Preview da Publicação</h3>
              <button
                onClick={closeDrawer}
                className="p-2 text-gray-400 hover:text-white hover:bg-white/10 rounded-lg transition-colors"
              >
                <XMarkIcon className="h-5 w-5" />
              </button>
            </div>
            <div className="p-4 sm:p-6 overflow-y-auto h-full">
              {selectedPublication && (
                <div className="space-y-4">
                  <h4 className="text-base font-semibold text-white">{selectedPublication.title}</h4>
                  <div className="flex items-center gap-4 text-sm text-gray-400">
                    <span className="bg-blue-600/20 text-blue-300 px-2 py-1 rounded text-xs">
                      {selectedPublication.source}
                    </span>
                    <span>{selectedPublication.date}</span>
                  </div>
                  <div className="prose prose-invert max-w-none">
                    <p className="text-gray-300 leading-relaxed">
                      {selectedPublication.excerpt}
                    </p>
                    <p className="text-gray-300 leading-relaxed">
                      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris.
                    </p>
                    <p className="text-gray-300 leading-relaxed">
                      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
              </p>
            </div>
                  <div className="flex gap-3 pt-4 border-t border-white/10">
                    <button className="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-500 text-white rounded-lg font-medium transition-colors flex items-center justify-center gap-2">
                      <ArrowDownTrayIcon className="h-4 w-4" />
                      Baixar PDF
                    </button>
                    <button className="flex-1 px-4 py-2 bg-white/10 hover:bg-white/20 text-white rounded-lg font-medium transition-colors flex items-center justify-center gap-2">
                      <LinkIcon className="h-4 w-4" />
                      Copiar link
                    </button>
                  </div>
                </div>
              )}
        </div>
      </div>
        </div>
      )}

      {/* Drawer de Monitoramento */}
      {showMonitorDrawer && (
        <div className="fixed inset-0 z-50 overflow-hidden">
          <div 
            className={`absolute inset-0 bg-black/50 backdrop-blur-sm ${monitorDrawerAnimation === 'slide-in' ? 'drawer-overlay-fade-in' : monitorDrawerAnimation === 'slide-out' ? 'drawer-overlay-fade-out' : ''}`}
            onClick={closeMonitorDrawer} 
          />
          <div className={`absolute right-0 top-0 h-full w-full max-w-4xl bg-slate-900 border-l border-white/10 shadow-2xl ${monitorDrawerAnimation === 'slide-in' ? 'drawer-slide-in-right' : monitorDrawerAnimation === 'slide-out' ? 'drawer-slide-out-right' : ''}`}>
            <div className="flex items-center justify-between p-4 sm:p-6 border-b border-white/10">
              <h3 className="text-lg font-semibold text-white">Ocorrências do Monitoramento</h3>
              <button
                onClick={closeMonitorDrawer}
                className="p-2 text-gray-400 hover:text-white hover:bg-white/10 rounded-lg transition-colors"
              >
                <XMarkIcon className="h-5 w-5" />
              </button>
            </div>
            <div className="p-4 sm:p-6 overflow-y-auto h-full">
              {selectedMonitor && (
                <div className="space-y-6">
                  {/* Header do Monitoramento */}
                  <div className="bg-white/5 border border-white/10 rounded-lg p-4">
                    <div className="flex items-center gap-3 mb-3">
                      <h4 className="text-lg font-semibold text-white">
                        {selectedMonitor.terms[0]}
                      </h4>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        selectedMonitor.isActive 
                          ? 'bg-green-600/20 text-green-300 border border-green-500/30' 
                          : 'bg-red-600/20 text-red-300 border border-red-500/30'
                      }`}>
                        {selectedMonitor.isActive ? 'Ativo' : 'Pausado'}
                      </span>
                    </div>
                    <p className="text-sm text-gray-400">
                      <span className="font-medium">Diários:</span> {selectedMonitor.diarios.map(id => {
                        const diario = diarios.find(d => d.id === id);
                        return diario ? diario.name : id;
                      }).join(', ')}
                    </p>
                    <p className="text-xs text-gray-500 mt-2">
                      {selectedMonitor.occurrences} ocorrências encontradas
                    </p>
                  </div>

                  {/* Lista de Ocorrências */}
                  <div className="space-y-4">
                    <h5 className="text-sm font-semibold text-white">Últimas Ocorrências</h5>
                    {Array.from({ length: selectedMonitor.occurrences }, (_, index) => (
                      <div
                        key={index}
                        className="bg-white/5 border border-white/10 rounded-lg p-4 hover:bg-white/10 transition-colors"
                      >
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex-1">
                            <h6 className="text-sm font-semibold text-white mb-2">
                              Edital de Concurso Público - Secretaria de Educação
                            </h6>
                            <div className="flex items-center gap-3 text-xs mb-2">
                              <span className="bg-blue-600/20 text-blue-300 px-2 py-1 rounded">
                                DOU
                              </span>
                              <span className="bg-purple-600/20 text-purple-300 px-2 py-1 rounded font-medium">
                                📅 N/A
                              </span>
                            </div>
                          </div>
                        </div>
                        <p className="text-gray-300 text-sm mb-3 line-clamp-2">
                          A Secretaria de Educação torna público o edital de concurso público para provimento de vagas...
                        </p>
                        <div className="flex gap-2">
                          <button className="px-3 py-1.5 bg-white/10 text-white hover:bg-white/20 rounded-lg text-xs font-medium transition-colors flex items-center gap-1.5 cursor-pointer">
                            <ArrowDownTrayIcon className="h-3 w-3" />
                            PDF
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Toast Notification */}
      {showToast && (
        <div className="fixed bottom-4 right-4 z-50 animate-in slide-in-from-bottom-2 duration-300">
          <div className="bg-green-600 text-white px-6 py-3 rounded-lg shadow-lg flex items-center gap-3">
            <div className="w-5 h-5 bg-white/20 rounded-full flex items-center justify-center">
              <span className="text-xs">✓</span>
            </div>
            <span className="font-medium">{toastMessage}</span>
          </div>
        </div>
      )}

      {/* Register Modal */}
      <RegisterModal
        isOpen={isRegisterModalOpen}
        onClose={() => setIsRegisterModalOpen(false)}
        title="Cadastro Rápido"
        subtitle="Crie sua conta para começar a usar os Diários Oficiais"
        onSuccess={() => {
          setIsRegisterModalOpen(false);
          // Após cadastro, continuar com a ação original
          if (searchTerms.length > 0 && selectedDiarios.length > 0) {
            handleSearch();
          } else if (monitorTerm && monitorDiarios.length > 0) {
            handleCreateMonitoramento();
          }
        }}
      />

      {/* Test Modal */}
      <TestModal
        isOpen={isTestModalOpen}
        onClose={() => setIsTestModalOpen(false)}
      />

      {/* Delete Confirmation Modal */}
      {showDeleteModal && (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-[10000] p-4">
          <div className="bg-gray-900/95 backdrop-blur-md border border-white/30 rounded-2xl p-6 max-w-md w-full shadow-2xl">
            {/* Ícone de perigo */}
            <div className="flex items-center justify-center w-12 h-12 mx-auto mb-4 bg-red-500/20 rounded-full">
              <svg 
                className="w-6 h-6 text-red-400" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth={2} 
                  d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" 
                />
                </svg>
              </div>

            {/* Título */}
            <h2 className="text-xl font-bold text-white text-center mb-3">
                Excluir Monitoramento
            </h2>

            {/* Descrição */}
            <p className="text-gray-300 text-center mb-6">
                Tem certeza que deseja excluir este monitoramento? Esta ação não pode ser desfeita.
              </p>

            {/* Botões */}
            <div className="flex gap-3 justify-center">
                <button
                  onClick={() => {
                    setShowDeleteModal(false);
                    setDeletingMonitoringId(null);
                  }}
                className="px-4 py-2 rounded-lg text-gray-300 hover:text-white hover:bg-white/5 transition-colors duration-200 cursor-pointer"
                >
                  Cancelar
                </button>
                <button
                  onClick={confirmDelete}
                className="px-4 py-2 rounded-lg font-medium bg-red-500 hover:bg-red-600 text-white transition-colors duration-200 cursor-pointer"
                >
                  Excluir
                </button>
            </div>
          </div>
        </div>
      )}

      {/* Toast de notificação */}
      <Toast
        message={toast.message}
        type={toast.type}
        isVisible={toast.isVisible}
        onClose={() => setToast(prev => ({ ...prev, isVisible: false }))}
      />
    </div>
  );
}

