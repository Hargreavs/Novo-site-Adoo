'use client';

import { useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { useAuth } from '@/contexts/AuthContext';
import AssinaturasTab from '@/app/(modal)/minha-conta/_tabs/Assinaturas';

interface UserSettingsModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function UserSettingsModal({ isOpen, onClose }: UserSettingsModalProps) {
  const { user, updateUser } = useAuth();
  const [activeTab, setActiveTab] = useState('geral');
  const [isMounted, setIsMounted] = useState(false);
  
  // Estados para os toggles de notifica√ß√µes
  const [emailNotifications, setEmailNotifications] = useState(true);
  const [pushNotifications, setPushNotifications] = useState(true);
  const [smsNotifications, setSmsNotifications] = useState(false);
  
  // Estados para altera√ß√£o de senha
  const [showPasswordChange, setShowPasswordChange] = useState(false);
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isChangingPassword, setIsChangingPassword] = useState(false);
  const [passwordMessage, setPasswordMessage] = useState('');
  const [passwordError, setPasswordError] = useState('');

  // Estados para altera√ß√£o de e-mail
  const [showEmailChange, setShowEmailChange] = useState(false);
  const [newEmail, setNewEmail] = useState('');
  const [isSendingCode, setIsSendingCode] = useState(false);
  const [showEmailVerification, setShowEmailVerification] = useState(false);
  const [emailVerificationCode, setEmailVerificationCode] = useState(['', '', '', '', '', '']);
  const [isVerifyingEmail, setIsVerifyingEmail] = useState(false);
  const [emailMessage, setEmailMessage] = useState('');
  const [emailError, setEmailError] = useState('');
  const [codeExpiryTime, setCodeExpiryTime] = useState<number | null>(null);
  const [timeLeft, setTimeLeft] = useState(0);

  // Estados para edi√ß√£o de nome
  const [isEditingName, setIsEditingName] = useState(false);
  const [editedName, setEditedName] = useState('');
  const [isSavingName, setIsSavingName] = useState(false);
  const [nameMessage, setNameMessage] = useState('');
  const [nameError, setNameError] = useState('');
  
  // Estados para encerrar conta
  const [showDeleteAccount, setShowDeleteAccount] = useState(false);
  const [deleteReason, setDeleteReason] = useState('');
  const [deleteFeedback, setDeleteFeedback] = useState('');
  const [isDeletingAccount, setIsDeletingAccount] = useState(false);
  const [deleteMessage, setDeleteMessage] = useState('');
  const [deleteError, setDeleteError] = useState('');
  const [hasActiveSubscription, setHasActiveSubscription] = useState(false); // Mock: simular se tem assinatura ativa
  

  // Carregar prefer√™ncias do localStorage
  useEffect(() => {
    const savedPreferences = localStorage.getItem('user-preferences');
    if (savedPreferences) {
      const preferences = JSON.parse(savedPreferences);
      setEmailNotifications(preferences.emailNotifications ?? true);
      setPushNotifications(preferences.pushNotifications ?? true);
      setSmsNotifications(preferences.smsNotifications ?? false);
    }
  }, []);

  // Salvar prefer√™ncias no localStorage
  const savePreferences = () => {
    const preferences = {
      emailNotifications,
      pushNotifications,
      smsNotifications,
    };
    localStorage.setItem('user-preferences', JSON.stringify(preferences));
  };

  // Timer para c√≥digo de verifica√ß√£o
  useEffect(() => {
    if (codeExpiryTime && timeLeft > 0) {
      const timer = setTimeout(() => {
        setTimeLeft(timeLeft - 1);
      }, 1000);
      return () => clearTimeout(timer);
    }
  }, [codeExpiryTime, timeLeft]);

  // Verificar se o componente est√° montado
  useEffect(() => {
    setIsMounted(true);
  }, []);

  // Fechar modal com ESC
  useEffect(() => {
    const handleEsc = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isOpen) {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEsc);
      document.body.style.overflow = 'hidden';
    }

    return () => {
      document.removeEventListener('keydown', handleEsc);
      document.body.style.overflow = 'unset';
    };
  }, [isOpen, onClose]);

  const tabs = [
    { id: 'geral', label: 'Geral', icon: '‚öôÔ∏è' },
    { id: 'seguranca', label: 'Seguran√ßa', icon: 'üîí' },
    { id: 'assinaturas', label: 'Assinaturas', icon: 'üí≥' },
    { id: 'suporte', label: 'Suporte', icon: 'üí¨' }
  ];

  const getUserInitials = (name: string) => {
    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);
  };

  const handlePasswordChange = async () => {
    if (!currentPassword || !newPassword || !confirmPassword) {
      setPasswordError('Todos os campos s√£o obrigat√≥rios');
      return;
    }

    if (newPassword !== confirmPassword) {
      setPasswordError('As senhas n√£o coincidem');
      return;
    }

    if (newPassword.length < 8) {
      setPasswordError('A senha deve ter pelo menos 8 caracteres');
      return;
    }

    setIsChangingPassword(true);
    setPasswordError('');
    setPasswordMessage('');

    try {
      // Simular chamada da API
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setPasswordMessage('Senha alterada com sucesso!');
      setCurrentPassword('');
      setNewPassword('');
      setConfirmPassword('');
      setShowPasswordChange(false);
    } catch (error) {
      setPasswordError('Erro ao alterar senha. Tente novamente.');
    } finally {
      setIsChangingPassword(false);
    }
  };

  const handleEmailChange = async () => {
    if (!newEmail) {
      setEmailError('E-mail √© obrigat√≥rio');
      return;
    }

    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(newEmail)) {
      setEmailError('E-mail inv√°lido');
      return;
    }

    setIsSendingCode(true);
    setEmailError('');
    setEmailMessage('');

    try {
      // Simular envio de c√≥digo
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      setShowEmailVerification(true);
      setCodeExpiryTime(Date.now() + 5 * 60 * 1000); // 5 minutos
      setTimeLeft(300);
      setEmailMessage('C√≥digo de verifica√ß√£o enviado para o novo e-mail');
    } catch (error) {
      setEmailError('Erro ao enviar c√≥digo. Tente novamente.');
    } finally {
      setIsSendingCode(false);
    }
  };

  const handleEmailVerification = async () => {
    const code = emailVerificationCode.join('');
    if (code.length !== 6) {
      setEmailError('C√≥digo deve ter 6 d√≠gitos');
      return;
    }

    setIsVerifyingEmail(true);
    setEmailError('');

    try {
      // Simular verifica√ß√£o
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Simular sucesso se o c√≥digo for "123456"
      if (code === '123456') {
        setEmailMessage('E-mail alterado com sucesso!');
        setNewEmail('');
        setEmailVerificationCode(['', '', '', '', '', '']);
        setShowEmailVerification(false);
        setShowEmailChange(false);
        setCodeExpiryTime(null);
        setTimeLeft(0);
      } else {
        setEmailError('C√≥digo inv√°lido');
      }
    } catch (error) {
      setEmailError('Erro ao verificar c√≥digo. Tente novamente.');
    } finally {
      setIsVerifyingEmail(false);
    }
  };

  const handleNameChange = async () => {
    if (!editedName.trim()) {
      setNameError('Nome √© obrigat√≥rio');
      return;
    }

    setIsSavingName(true);
    setNameError('');
    setNameMessage('');

    try {
      // Simular chamada da API
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      setNameMessage('Nome alterado com sucesso!');
      setEditedName('');
      setIsEditingName(false);
    } catch (error) {
      setNameError('Erro ao alterar nome. Tente novamente.');
    } finally {
      setIsSavingName(false);
    }
  };

  const handleDeleteAccount = async () => {
    if (!deleteReason) {
      setDeleteError('Motivo √© obrigat√≥rio');
      return;
    }

    setIsDeletingAccount(true);
    setDeleteError('');
    setDeleteMessage('');

    try {
      // Simular chamada da API
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      setDeleteMessage('Conta encerrada com sucesso. Voc√™ ser√° redirecionado...');
      setTimeout(() => {
        onClose();
        // Aqui voc√™ faria o logout real
      }, 2000);
    } catch (error) {
      setDeleteError('Erro ao encerrar conta. Tente novamente.');
    } finally {
      setIsDeletingAccount(false);
    }
  };

  const handleCodeInputChange = (index: number, value: string) => {
    if (value.length > 1) return;
    
    const newCode = [...emailVerificationCode];
    newCode[index] = value;
    setEmailVerificationCode(newCode);

    // Auto-focus no pr√≥ximo campo
    if (value && index < 5) {
      const nextInput = document.getElementById(`code-${index + 1}`);
      nextInput?.focus();
    }
  };

  const handleCodeKeyDown = (index: number, e: React.KeyboardEvent) => {
    if (e.key === 'Backspace' && !emailVerificationCode[index] && index > 0) {
      const prevInput = document.getElementById(`code-${index - 1}`);
      prevInput?.focus();
    }
  };

  if (!isMounted) return null;

  return createPortal(
    <div className={`fixed inset-0 z-50 transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}>
      {/* Backdrop */}
      <div 
        className="absolute inset-0 bg-black/50 backdrop-blur-sm"
        onClick={onClose}
      />
      
      {/* Modal */}
      <div className={`relative flex items-center justify-center min-h-screen p-4 transition-transform duration-300 ${isOpen ? 'scale-100' : 'scale-95'}`}>
        <div className="relative bg-gray-900 rounded-2xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-700">
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg">
                  {getUserInitials(user?.name || 'U')}
                </span>
              </div>
              <div>
                <h2 className="text-xl font-bold text-white">{user?.name || 'Usu√°rio'}</h2>
                <p className="text-gray-400 text-sm">{user?.email || 'usuario@exemplo.com'}</p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="w-8 h-8 bg-gray-700 hover:bg-gray-600 rounded-full flex items-center justify-center transition-colors duration-200 cursor-pointer"
            >
              <svg className="w-4 h-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          {/* Content */}
          <div className="flex">
            {/* Sidebar */}
            <div className="w-64 bg-gray-800 p-6">
              <nav className="space-y-2">
                {tabs.map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors duration-200 cursor-pointer ${
                      activeTab === tab.id
                        ? 'bg-blue-500 text-white'
                        : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                    }`}
                  >
                    <span className="text-lg">{tab.icon}</span>
                    <span className="font-medium">{tab.label}</span>
                  </button>
                ))}
              </nav>
            </div>

            {/* Main Content */}
            <div className="flex-1 p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
              {/* Tab Geral */}
              {activeTab === 'geral' && (
                <div className="space-y-6">
                  {/* Informa√ß√µes do usu√°rio */}
                  <div className="bg-gray-800 rounded-lg p-6">
                    <h3 className="text-lg font-semibold text-white mb-4">Informa√ß√µes Pessoais</h3>
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">Nome</label>
                        <div className="flex items-center space-x-3">
                          {isEditingName ? (
                            <>
                              <input
                                type="text"
                                value={editedName}
                                onChange={(e) => setEditedName(e.target.value)}
                                className="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                placeholder="Digite seu nome"
                              />
                              <button
                                onClick={handleNameChange}
                                disabled={isSavingName}
                                className="px-4 py-2 bg-blue-500 hover:bg-blue-600 disabled:bg-gray-600 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                              >
                                {isSavingName ? 'Salvando...' : 'Salvar'}
                              </button>
                              <button
                                onClick={() => {
                                  setIsEditingName(false);
                                  setEditedName('');
                                  setNameError('');
                                  setNameMessage('');
                                }}
                                className="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                              >
                                Cancelar
                              </button>
                            </>
                          ) : (
                            <>
                              <span className="flex-1 text-white">{user?.name || 'Nome n√£o definido'}</span>
                              <button
                                onClick={() => {
                                  setIsEditingName(true);
                                  setEditedName(user?.name || '');
                                }}
                                className="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                              >
                                Editar
                              </button>
                            </>
                          )}
                        </div>
                        {nameError && (
                          <p className="mt-2 text-sm text-red-400">{nameError}</p>
                        )}
                        {nameMessage && (
                          <p className="mt-2 text-sm text-green-400">{nameMessage}</p>
                        )}
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">E-mail</label>
                        <div className="flex items-center space-x-3">
                          <span className="flex-1 text-white">{user?.email || 'usuario@exemplo.com'}</span>
                          <button
                            onClick={() => setShowEmailChange(true)}
                            className="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                          >
                            Alterar
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Prefer√™ncias de notifica√ß√£o */}
                  <div className="bg-gray-800 rounded-lg p-6">
                    <h3 className="text-lg font-semibold text-white mb-4">Prefer√™ncias de Notifica√ß√£o</h3>
                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="text-white font-medium">E-mail</h4>
                          <p className="text-gray-400 text-sm">Receber notifica√ß√µes por e-mail</p>
                        </div>
                        <button
                          onClick={() => {
                            setEmailNotifications(!emailNotifications);
                            savePreferences();
                          }}
                          className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900 cursor-pointer ${
                            emailNotifications ? 'bg-blue-500' : 'bg-gray-600'
                          }`}
                        >
                          <span
                            className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200 ${
                              emailNotifications ? 'translate-x-6' : 'translate-x-1'
                            }`}
                          />
                        </button>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="text-white font-medium">Push</h4>
                          <p className="text-gray-400 text-sm">Receber notifica√ß√µes push</p>
                        </div>
                        <button
                          onClick={() => {
                            setPushNotifications(!pushNotifications);
                            savePreferences();
                          }}
                          className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900 cursor-pointer ${
                            pushNotifications ? 'bg-blue-500' : 'bg-gray-600'
                          }`}
                        >
                          <span
                            className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200 ${
                              pushNotifications ? 'translate-x-6' : 'translate-x-1'
                            }`}
                          />
                        </button>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="text-white font-medium">SMS</h4>
                          <p className="text-gray-400 text-sm">Receber notifica√ß√µes por SMS</p>
                        </div>
                        <button
                          onClick={() => {
                            setSmsNotifications(!smsNotifications);
                            savePreferences();
                          }}
                          className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900 cursor-pointer ${
                            smsNotifications ? 'bg-blue-500' : 'bg-gray-600'
                          }`}
                        >
                          <span
                            className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200 ${
                              smsNotifications ? 'translate-x-6' : 'translate-x-1'
                            }`}
                          />
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Tab Seguran√ßa */}
              {activeTab === 'seguranca' && (
                <div className="space-y-6">
                  {/* Alterar senha */}
                  <div className="bg-gray-800 rounded-lg p-6">
                    <h3 className="text-lg font-semibold text-white mb-4">Alterar Senha</h3>
                    {!showPasswordChange ? (
                      <button
                        onClick={() => setShowPasswordChange(true)}
                        className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                      >
                        Alterar Senha
                      </button>
                    ) : (
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-300 mb-2">Senha Atual</label>
                          <input
                            type="password"
                            value={currentPassword}
                            onChange={(e) => setCurrentPassword(e.target.value)}
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Digite sua senha atual"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-300 mb-2">Nova Senha</label>
                          <input
                            type="password"
                            value={newPassword}
                            onChange={(e) => setNewPassword(e.target.value)}
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Digite sua nova senha"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-300 mb-2">Confirmar Nova Senha</label>
                          <input
                            type="password"
                            value={confirmPassword}
                            onChange={(e) => setConfirmPassword(e.target.value)}
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Confirme sua nova senha"
                          />
                        </div>
                        <div className="flex space-x-3">
                          <button
                            onClick={handlePasswordChange}
                            disabled={isChangingPassword}
                            className="px-4 py-2 bg-blue-500 hover:bg-blue-600 disabled:bg-gray-600 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                          >
                            {isChangingPassword ? 'Alterando...' : 'Alterar Senha'}
                          </button>
                          <button
                            onClick={() => {
                              setShowPasswordChange(false);
                              setCurrentPassword('');
                              setNewPassword('');
                              setConfirmPassword('');
                              setPasswordError('');
                              setPasswordMessage('');
                            }}
                            className="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                          >
                            Cancelar
                          </button>
                        </div>
                        {passwordError && (
                          <p className="text-sm text-red-400">{passwordError}</p>
                        )}
                        {passwordMessage && (
                          <p className="text-sm text-green-400">{passwordMessage}</p>
                        )}
                      </div>
                    )}
                  </div>

                  {/* Alterar e-mail */}
                  <div className="bg-gray-800 rounded-lg p-6">
                    <h3 className="text-lg font-semibold text-white mb-4">Alterar E-mail</h3>
                    {!showEmailChange ? (
                      <button
                        onClick={() => setShowEmailChange(true)}
                        className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                      >
                        Alterar E-mail
                      </button>
                    ) : showEmailVerification ? (
                      <div className="space-y-4">
                        <p className="text-gray-300 text-sm">
                          Digite o c√≥digo de verifica√ß√£o enviado para <strong>{newEmail}</strong>
                        </p>
                        <div className="flex space-x-2">
                          {emailVerificationCode.map((digit, index) => (
                            <input
                              key={index}
                              id={`code-${index}`}
                              type="text"
                              maxLength={1}
                              value={digit}
                              onChange={(e) => handleCodeInputChange(index, e.target.value)}
                              onKeyDown={(e) => handleCodeKeyDown(index, e)}
                              className="w-12 h-12 text-center text-lg font-bold bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                            />
                          ))}
                        </div>
                        {timeLeft > 0 && (
                          <p className="text-sm text-gray-400">
                            C√≥digo expira em {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}
                          </p>
                        )}
                        <div className="flex space-x-3">
                          <button
                            onClick={handleEmailVerification}
                            disabled={isVerifyingEmail}
                            className="px-4 py-2 bg-blue-500 hover:bg-blue-600 disabled:bg-gray-600 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                          >
                            {isVerifyingEmail ? 'Verificando...' : 'Verificar C√≥digo'}
                          </button>
                          <button
                            onClick={() => {
                              setShowEmailVerification(false);
                              setEmailVerificationCode(['', '', '', '', '', '']);
                              setCodeExpiryTime(null);
                              setTimeLeft(0);
                              setEmailError('');
                              setEmailMessage('');
                            }}
                            className="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                          >
                            Cancelar
                          </button>
                        </div>
                        {emailError && (
                          <p className="text-sm text-red-400">{emailError}</p>
                        )}
                        {emailMessage && (
                          <p className="text-sm text-green-400">{emailMessage}</p>
                        )}
                      </div>
                    ) : (
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-300 mb-2">Novo E-mail</label>
                          <input
                            type="email"
                            value={newEmail}
                            onChange={(e) => setNewEmail(e.target.value)}
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Digite seu novo e-mail"
                          />
                        </div>
                        <div className="flex space-x-3">
                          <button
                            onClick={handleEmailChange}
                            disabled={isSendingCode}
                            className="px-4 py-2 bg-blue-500 hover:bg-blue-600 disabled:bg-gray-600 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                          >
                            {isSendingCode ? 'Enviando...' : 'Enviar C√≥digo'}
                          </button>
                          <button
                            onClick={() => {
                              setShowEmailChange(false);
                              setNewEmail('');
                              setEmailError('');
                              setEmailMessage('');
                            }}
                            className="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                          >
                            Cancelar
                          </button>
                        </div>
                        {emailError && (
                          <p className="text-sm text-red-400">{emailError}</p>
                        )}
                        {emailMessage && (
                          <p className="text-sm text-green-400">{emailMessage}</p>
                        )}
                      </div>
                    )}
                  </div>

                  {/* Encerrar conta */}
                  <div className="bg-red-900/20 border border-red-500/30 rounded-lg p-6">
                    <h3 className="text-lg font-semibold text-red-400 mb-4">Zona de Perigo</h3>
                    <div className="space-y-4">
                      <p className="text-gray-300 text-sm">
                        Encerrar sua conta √© uma a√ß√£o permanente. Todos os seus dados ser√£o removidos e n√£o poder√£o ser recuperados.
                      </p>
                      {!showDeleteAccount ? (
                        <button
                          onClick={() => setShowDeleteAccount(true)}
                          className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                        >
                          Encerrar Conta
                        </button>
                      ) : (
                        <div className="space-y-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-300 mb-2">Motivo (obrigat√≥rio)</label>
                            <select
                              value={deleteReason}
                              onChange={(e) => setDeleteReason(e.target.value)}
                              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-red-500"
                            >
                              <option value="">Selecione um motivo</option>
                              <option value="nao-uso">N√£o uso mais o servi√ßo</option>
                              <option value="problemas-tecnicos">Problemas t√©cnicos</option>
                              <option value="preco">Pre√ßo muito alto</option>
                              <option value="outro">Outro</option>
                            </select>
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-300 mb-2">Feedback (opcional)</label>
                            <textarea
                              value={deleteFeedback}
                              onChange={(e) => setDeleteFeedback(e.target.value)}
                              rows={3}
                              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-red-500"
                              placeholder="Conte-nos como podemos melhorar..."
                            />
                          </div>
                          <div className="flex space-x-3">
                            <button
                              onClick={handleDeleteAccount}
                              disabled={isDeletingAccount}
                              className="px-4 py-2 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                            >
                              {isDeletingAccount ? 'Encerrando...' : 'Confirmar Encerramento'}
                            </button>
                            <button
                              onClick={() => {
                                setShowDeleteAccount(false);
                                setDeleteReason('');
                                setDeleteFeedback('');
                                setDeleteError('');
                                setDeleteMessage('');
                              }}
                              className="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white text-sm font-medium rounded-lg transition-colors duration-200 cursor-pointer"
                            >
                              Cancelar
                            </button>
                          </div>
                          {deleteError && (
                            <p className="text-sm text-red-400">{deleteError}</p>
                          )}
                          {deleteMessage && (
                            <p className="text-sm text-green-400">{deleteMessage}</p>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              )}

              {/* Tab Assinaturas */}
              {activeTab === 'assinaturas' && (
                <AssinaturasTab />
              )}

              {/* Tab Suporte */}
              {activeTab === 'suporte' && (
                <div className="space-y-8">
                  <div className="border-b border-gray-700 pb-8">
                    <h4 className="text-lg font-bold text-white mb-6">Central de Ajuda</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="p-4 bg-gray-800 rounded-lg border border-gray-700">
                        <h5 className="text-sm font-medium text-white mb-2">Documenta√ß√£o</h5>
                        <p className="text-sm text-gray-400 mb-4">Acesse nossa base de conhecimento</p>
                        <button className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white text-sm font-medium rounded-md transition-colors duration-200">
                          Acessar
                        </button>
                      </div>
                      <div className="p-4 bg-gray-800 rounded-lg border border-gray-700">
                        <h5 className="text-sm font-medium text-white mb-2">Contato</h5>
                        <p className="text-sm text-gray-400 mb-4">Entre em contato conosco</p>
                        <button className="px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white text-sm font-medium rounded-md transition-colors duration-200">
                          Enviar mensagem
                        </button>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="text-lg font-bold text-white mb-6">Perguntas Frequentes</h4>
                    <div className="space-y-4">
                      <div className="p-4 bg-gray-800 rounded-lg border border-gray-700">
                        <h5 className="text-sm font-medium text-white mb-2">Como alterar meu plano?</h5>
                        <p className="text-sm text-gray-400">Voc√™ pode alterar seu plano a qualquer momento na se√ß√£o de assinaturas.</p>
                      </div>
                      <div className="p-4 bg-gray-800 rounded-lg border border-gray-700">
                        <h5 className="text-sm font-medium text-white mb-2">Como cancelar minha assinatura?</h5>
                        <p className="text-sm text-gray-400">Entre em contato conosco para cancelar sua assinatura.</p>
                      </div>
                      <div className="p-4 bg-gray-800 rounded-lg border border-gray-700">
                        <h5 className="text-sm font-medium text-white mb-2">Como alterar meu m√©todo de pagamento?</h5>
                        <p className="text-sm text-gray-400">Acesse a se√ß√£o de pagamentos para gerenciar seus m√©todos de pagamento.</p>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>,
    document.body
  );
}